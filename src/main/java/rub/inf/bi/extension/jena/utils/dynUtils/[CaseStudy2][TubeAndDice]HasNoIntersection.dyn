{
  "Uuid": "8b1e7f7f-7304-4d5e-a570-fd8ce7ff620e",
  "IsCustomNode": false,
  "Description": null,
  "Name": "[CaseStudy2][TubeAndDice]HasNoIntersection",
  "ElementResolver": {
    "ResolutionMap": {
      "Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      },
      "Vector": {
        "Key": "Autodesk.DesignScript.Geometry.Vector",
        "Value": "ProtoGeometry.dll"
      },
      "Circle": {
        "Key": "Autodesk.DesignScript.Geometry.Circle",
        "Value": "ProtoGeometry.dll"
      },
      "NurbsCurve": {
        "Key": "Autodesk.DesignScript.Geometry.NurbsCurve",
        "Value": "ProtoGeometry.dll"
      },
      "Dynamo.Mesh": {
        "Key": "Autodesk.Dynamo.MeshToolkit.Mesh",
        "Value": "MeshToolkit.dll"
      },
      "Autodesk.Dynamo.MeshToolkit.Mesh": {
        "Key": "Autodesk.Dynamo.MeshToolkit.Mesh",
        "Value": "MeshToolkit.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport Autodesk.DesignScript.Geometry\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n#create a cuboid with specified lengths\r\ncs = CoordinateSystem.Identity();\r\ncub = Cuboid.ByLengths(cs, 5, 15, 2);\r\n#create several cones\r\np1 = Point.ByCoordinates(0, 0, 10);\r\np2 = Point.ByCoordinates(0, 0, 20);\r\np3 = Point.ByCoordinates(0, 0, 30);\r\ncone1 = Cone.ByPointsRadii(p1, p2, 10, 6);\r\ncone2 = Cone.ByPointsRadii(p2, p3, 6, 0);\r\n#make a cylinder\r\ncylCS = cs.Translate(10, 0, 0);\r\ncyl = Cylinder.ByRadiusHeight(cylCS, 3, 10);\r\n\r\nOUT = cyl",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "22628e4e6bfe4646980e562ef491c5a1",
      "Inputs": [
        {
          "Id": "5d67cd44dfc9415bb2e48b24c2e7a94c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7cf99c235072456a9f35a16e0d4dc391",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Watch3DNodeModels.Watch3D, Watch3DNodeModels",
      "WatchWidth": 200.0,
      "WatchHeight": 200.0,
      "WasExecuted": true,
      "Camera": {
        "Name": "a329b7f7-7ea2-4405-bc0b-32426dd8799d Preview",
        "EyeX": -17.0,
        "EyeY": 24.0,
        "EyeZ": 50.0,
        "LookX": 12.0,
        "LookY": -13.0,
        "LookZ": -58.0,
        "UpX": 0.0,
        "UpY": 1.0,
        "UpZ": 0.0
      },
      "NodeType": "ExtensionNode",
      "Id": "a329b7f77ea24405bc0b32426dd8799d",
      "Inputs": [
        {
          "Id": "44c3b5d519564e65ba4088f9dde2d8de",
          "Name": "",
          "Description": "Incoming geometry objects.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "47258dd852274497b7e79ad7655746e9",
          "Name": "",
          "Description": "Incoming geometry objects.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Shows a dynamic preview of geometry."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "p=Point.ByCoordinates([0,7,20],[0,11,3]);\na=Arc.ByThreePoints(p[0],p[1],p[2]);\nvec_Y=Vector.YAxis();\nc=Circle.ByCenterPointRadiusNormal(p[0],1,vec_Y);\nc.SweepAsSolid(a);",
      "Id": "8e7a3ce24b2f4f3fa82a6c41cc745eec",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1279d6cf7b79446c91a91fd0acecfdf5",
          "Name": "",
          "Description": "p",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "555cac77ef144a44b23d2b245b3e80af",
          "Name": "",
          "Description": "a",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8ea7b954b2f14e549b86f0b385b9d197",
          "Name": "",
          "Description": "vec_Y",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0cf54bfedec14fb697e5cb090a3b22f8",
          "Name": "",
          "Description": "c",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9653978126b54bbfa404b376fe79251e",
          "Name": "",
          "Description": "Value of expression at line 5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.NurbsCurve.ByPoints@Autodesk.DesignScript.Geometry.Point[],bool",
      "Id": "7a1e3962650e4310b47e30e253e8696e",
      "Inputs": [
        {
          "Id": "defda963073f43fda5beb44e3cf2e580",
          "Name": "points",
          "Description": "Point[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7fbe5c8e84444637b66c8c145e26d6a4",
          "Name": "closeCurve",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "44970cf3e97d44d0abf653a16aaa24ae",
          "Name": "NurbsCurve",
          "Description": "NurbsCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a BSplineCurve by interpolating between points.\n\nNurbsCurve.ByPoints (points: Point[], closeCurve: bool = false): NurbsCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "pt=Point.ByCoordinates([0,5,5,0],[0,0,5,5]);\npt_lst=[pt[0],pt[1],pt[2],pt[3]];\nis_close=true;\ncenter_pt=pt[0];\nradius=1.5;",
      "Id": "fc6594b85a484cca918c984686e99374",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b657627e435742519d3776c843f3fb2b",
          "Name": "",
          "Description": "pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "74d44641b1724279b81f6df55ea4e105",
          "Name": "",
          "Description": "pt_lst",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1f05af3b9a2c4a77b47cec137991ad26",
          "Name": "",
          "Description": "is_close",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6f0247fb4a764148bc205f67bacf63cb",
          "Name": "",
          "Description": "center_pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f78b9d3217f44a50b5c12db8919a3a23",
          "Name": "",
          "Description": "radius",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Circle.ByCenterPointRadiusNormal@Autodesk.DesignScript.Geometry.Point,double,Autodesk.DesignScript.Geometry.Vector",
      "Id": "1f38c190550a446fa732f9216f9a4318",
      "Inputs": [
        {
          "Id": "5fefb07388804e799894e571c55bf311",
          "Name": "centerPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "64c2151a4c214d93ac41f21c0193c74e",
          "Name": "radius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8e5b7e6507c145f897ba93a8ad177b2c",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0da531e9f78940519bf531c41ca22fe7",
          "Name": "Circle",
          "Description": "Circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a Circle with specified center Point, radius, and normal direction.\n\nCircle.ByCenterPointRadiusNormal (centerPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), radius: double = 1, normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Circle"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.YAxis",
      "Id": "564500ce75a94e5881cdec85505ff57b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "233c897a6e984bf782fae8755e36ce44",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Y axis Vector (0,1,0)\n\nVector.YAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "solid=circle.SweepAsSolid(curve);",
      "Id": "bfca5700fc564da88c3938e3ac8f748d",
      "Inputs": [
        {
          "Id": "72942da000b549aab1c67364cdbd7b42",
          "Name": "circle",
          "Description": "circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "464228951ec640e1ae9329759a2baf71",
          "Name": "curve",
          "Description": "curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "29c95c70e22a4f0fb4bcd9df38b9831c",
          "Name": "",
          "Description": "solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.NurbsCurve.ByPoints@Autodesk.DesignScript.Geometry.Point[],bool",
      "Id": "fe00891fe5c04a22ad408c4e5695dd3b",
      "Inputs": [
        {
          "Id": "2740ef15aa6c4c6dad9325b4c4ade906",
          "Name": "points",
          "Description": "Point[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bb79d962d0eb4a22bc7f773f1266df64",
          "Name": "closeCurve",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "106a082e6b0c4f198f3617052c02ead9",
          "Name": "NurbsCurve",
          "Description": "NurbsCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a BSplineCurve by interpolating between points.\n\nNurbsCurve.ByPoints (points: Point[], closeCurve: bool = false): NurbsCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "pt=Point.ByCoordinates([-2.5, 0, 2, 0],[2.5, 2.5, 2.5, 2.5],[0, -2.5, 0, 2.5]);\npt_lst=[pt[0],pt[1],pt[2],pt[3]];\nis_close=true;\ncenter_pt=pt[0];\nradius=1;",
      "Id": "4eee45d2570246689c7cae0d807acdb4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e4a3670c44744ca497a1fceab4ca743b",
          "Name": "",
          "Description": "pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c1b2b7651fbb4d4ea7e5c288ad726217",
          "Name": "",
          "Description": "pt_lst",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a3f112d26789468a9baa1976c4926319",
          "Name": "",
          "Description": "is_close",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a859e99054044f08bc032108fc73b270",
          "Name": "",
          "Description": "center_pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f9bf8e7d148b416f82b935a51b762408",
          "Name": "",
          "Description": "radius",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Circle.ByCenterPointRadiusNormal@Autodesk.DesignScript.Geometry.Point,double,Autodesk.DesignScript.Geometry.Vector",
      "Id": "8ed443bc970045e48bc8fad3f0c603ec",
      "Inputs": [
        {
          "Id": "722757df34754227a6c42733cc5f89d9",
          "Name": "centerPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a6fa961d561c492dbea6f0acb6e326a8",
          "Name": "radius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8ee1f68e1cb743ef828d5c74b3e0c09d",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6857fed3a21e454aa43bce04041e9472",
          "Name": "Circle",
          "Description": "Circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a Circle with specified center Point, radius, and normal direction.\n\nCircle.ByCenterPointRadiusNormal (centerPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), radius: double = 1, normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Circle"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "solid=circle.SweepAsSolid(curve);",
      "Id": "d81673fb7d4f4d16834e8422b2b83f79",
      "Inputs": [
        {
          "Id": "d505648d787c49258ff7e0bcf186ee59",
          "Name": "circle",
          "Description": "circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7cda9a91b03b4dc781aa6958fc637df9",
          "Name": "curve",
          "Description": "curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2d80c03e73644bf2b256eaac76ece8ce",
          "Name": "",
          "Description": "solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "469c3cd499b44f4c90eec11e000f14f0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "eae4b4c0f32041f8be727062a8d21fa0",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Z axis Vector (0,0,1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "pt=Point.ByCoordinates([10,10],[15,15],[-1,6]);\npt_lst=[pt[0],pt[1]];\nis_close=false;\ncenter_pt=pt[0];\nradius=1;",
      "Id": "861b44d4ba0b4e0c87fba3668acb52d4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "efbc5a56a97b46ae97ef6538c2873bf5",
          "Name": "",
          "Description": "pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8941ad9a3ffa44fd82502b6093ba15ab",
          "Name": "",
          "Description": "pt_lst",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b7b5a68004f4636a6888daece7469b3",
          "Name": "",
          "Description": "is_close",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "072c52ba4fe54dd597451e602311923d",
          "Name": "",
          "Description": "center_pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d74e262f2e964785b9400c5ae10ad459",
          "Name": "",
          "Description": "radius",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Circle.ByCenterPointRadiusNormal@Autodesk.DesignScript.Geometry.Point,double,Autodesk.DesignScript.Geometry.Vector",
      "Id": "29f9e8de0a80473c93ef3e708d1d355d",
      "Inputs": [
        {
          "Id": "65e96e127f9c457dac8abbd21fe425f8",
          "Name": "centerPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ce73cf6d95474db6abfe5a3a4c8ddd73",
          "Name": "radius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "24286e67ceda4866931eb6fe9dd973d5",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "079f6a378d8446cda5c4d5f2c4bd22f8",
          "Name": "Circle",
          "Description": "Circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a Circle with specified center Point, radius, and normal direction.\n\nCircle.ByCenterPointRadiusNormal (centerPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), radius: double = 1, normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Circle"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "solid=circle.SweepAsSolid(curve);",
      "Id": "34a61a841b9f4186bcfcd286ed3c6478",
      "Inputs": [
        {
          "Id": "db4f160c1466445f8f7b4bb3c8371ad8",
          "Name": "circle",
          "Description": "circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "23b92bf374f44dc7a3251bed331eb73e",
          "Name": "curve",
          "Description": "curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f2ecd0615e654ce79ec47e7aa856e177",
          "Name": "",
          "Description": "solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.NurbsCurve.ByPoints@Autodesk.DesignScript.Geometry.Point[],bool",
      "Id": "60f5fad9c5c440dcaf0f96f671d31090",
      "Inputs": [
        {
          "Id": "667467b6a70240daa8ee449518c0513b",
          "Name": "points",
          "Description": "Point[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f13dfdf7e40e43baa4054924dbdeb7ba",
          "Name": "closeCurve",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "df1cf4432c9e4e769f81b9ffc1acd030",
          "Name": "NurbsCurve",
          "Description": "NurbsCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a BSplineCurve by interpolating between points.\n\nNurbsCurve.ByPoints (points: Point[], closeCurve: bool = false): NurbsCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "15a2443546dd46e08fe341e9e1a35dc4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a918432b161d45bd8b9e0f9a9f940a86",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Z axis Vector (0,0,1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "pt=Point.ByCoordinates([6,14],[15,15],[2.5,2.5]);\npt_lst=[pt[0],pt[1]];\nis_close=false;\ncenter_pt=pt[0];\nradius=1;",
      "Id": "7fb70463483241b388105c3f214bcd06",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c6be0e296a55471091137a7262cf8215",
          "Name": "",
          "Description": "pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7bc6e9c6591c4d8bbb98042a7801bcdd",
          "Name": "",
          "Description": "pt_lst",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a52211e2d53f45e08c04d27dddd0d983",
          "Name": "",
          "Description": "is_close",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "24bb86bf1dd44889b585d8e667d445e9",
          "Name": "",
          "Description": "center_pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5991f720227b451c8d25e00402665faf",
          "Name": "",
          "Description": "radius",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.NurbsCurve.ByPoints@Autodesk.DesignScript.Geometry.Point[],bool",
      "Id": "c38542f622bf4056b2e04ffd2eb811a1",
      "Inputs": [
        {
          "Id": "0fc202ca9b8943989b3a6fe344fa42a4",
          "Name": "points",
          "Description": "Point[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9de2c501c9d343b7bd59c0e533c7307f",
          "Name": "closeCurve",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0df8bf00556d40b18f2c927ace481e41",
          "Name": "NurbsCurve",
          "Description": "NurbsCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a BSplineCurve by interpolating between points.\n\nNurbsCurve.ByPoints (points: Point[], closeCurve: bool = false): NurbsCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Circle.ByCenterPointRadiusNormal@Autodesk.DesignScript.Geometry.Point,double,Autodesk.DesignScript.Geometry.Vector",
      "Id": "408bac64c9bb4b59b9c650a170a1f8a7",
      "Inputs": [
        {
          "Id": "967ee1250d2c41869e784958416a7dbc",
          "Name": "centerPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4f2efb1902bd41f9975e312e48cdd002",
          "Name": "radius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dadea80c3e6545cfaf6fb6cf4de613dd",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "be129cf28b8e4afb8de593f7d74082c2",
          "Name": "Circle",
          "Description": "Circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a Circle with specified center Point, radius, and normal direction.\n\nCircle.ByCenterPointRadiusNormal (centerPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), radius: double = 1, normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Circle"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "solid=circle.SweepAsSolid(curve);",
      "Id": "165565d10e3a4ab4b569edc954658a59",
      "Inputs": [
        {
          "Id": "6000328b4c9b4241a890b5b95a6bcf07",
          "Name": "circle",
          "Description": "circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "df29efec14514b119f11618c40995839",
          "Name": "curve",
          "Description": "curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "804231be492d4fbe9d5787cc16e075bf",
          "Name": "",
          "Description": "solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.XAxis",
      "Id": "5c5fcf2b45cb4577b3f2c2b1c4ba37fe",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7b4dc3b9142f4da8a6094adccc4ec2ab",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical X axis Vector (1,0,0)\n\nVector.XAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Solid.Union@Autodesk.DesignScript.Geometry.Solid",
      "Id": "456bd47d516240a4bed332934c23188d",
      "Inputs": [
        {
          "Id": "2d0dde48115c4d7397b6b726f96f57d1",
          "Name": "solid",
          "Description": "Autodesk.DesignScript.Geometry.Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00a631760419429499076c587b7ccf49",
          "Name": "solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3c2aaeae2e3e4b77aa0b5e50badbb851",
          "Name": "Solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The boolean union of this Solid and another.\n\nSolid.Union (solid: Solid): Solid"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "pt=Point.ByCoordinates([10,10],[11,19],[2.5,2.5]);\npt_lst=[pt[0],pt[1]];\nis_close=false;\ncenter_pt=pt[0];\nradius=1;",
      "Id": "672deb8103be49609d6512e68ff2708b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2e782151ac1f4941970246fdae8376cc",
          "Name": "",
          "Description": "pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "daea6c3f70bf4d278d3c24698c5fed22",
          "Name": "",
          "Description": "pt_lst",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "65b343ad2f494b4b906e102b64d829e5",
          "Name": "",
          "Description": "is_close",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cce340ce43644c33844f0ba9a33ccb06",
          "Name": "",
          "Description": "center_pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c62b171a157d413085be8881528b2342",
          "Name": "",
          "Description": "radius",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.NurbsCurve.ByPoints@Autodesk.DesignScript.Geometry.Point[],bool",
      "Id": "28313af29d074295a47e99ab5be9c20f",
      "Inputs": [
        {
          "Id": "77a47643385b4fc19a8416ff9d562951",
          "Name": "points",
          "Description": "Point[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c2931c5bafc44ba9a0db3b23826d0d4",
          "Name": "closeCurve",
          "Description": "bool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1539bc7d0dde4db9a676993fef47ba93",
          "Name": "NurbsCurve",
          "Description": "NurbsCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a BSplineCurve by interpolating between points.\n\nNurbsCurve.ByPoints (points: Point[], closeCurve: bool = false): NurbsCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Circle.ByCenterPointRadiusNormal@Autodesk.DesignScript.Geometry.Point,double,Autodesk.DesignScript.Geometry.Vector",
      "Id": "f59e31fd7d57412a8503ece0ceb3cd86",
      "Inputs": [
        {
          "Id": "bb1ec5c1dead4ff497d8ae431e4098ba",
          "Name": "centerPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "438193bd1e9345808f76191aa06eebbd",
          "Name": "radius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b48b1ef04ed4b1bb5cf9b777216da1b",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ba3e3a2692d4a5bae80d6f87e471666",
          "Name": "Circle",
          "Description": "Circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a Circle with specified center Point, radius, and normal direction.\n\nCircle.ByCenterPointRadiusNormal (centerPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), radius: double = 1, normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Circle"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "solid=circle.SweepAsSolid(curve);",
      "Id": "7012df8b36404555a27ecb450662e146",
      "Inputs": [
        {
          "Id": "19ab340dd00c48f3be13cad0fb4b5da4",
          "Name": "circle",
          "Description": "circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4b01f03b1fa642358c3e4e655269d47a",
          "Name": "curve",
          "Description": "curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "db1623c2fe6b48b8943e0f1071c450c8",
          "Name": "",
          "Description": "solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.YAxis",
      "Id": "7366274bffc747d98adcd2e342e1066e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fb81e190b1b446bc95f55b4eaa6625cb",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Y axis Vector (0,1,0)\n\nVector.YAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Solid.Union@Autodesk.DesignScript.Geometry.Solid",
      "Id": "5ab8cb039f0e45ccbb6036981142fdf3",
      "Inputs": [
        {
          "Id": "5e97a5f2515845cabc272188e2b8c8c1",
          "Name": "solid",
          "Description": "Autodesk.DesignScript.Geometry.Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bd810ffcfdec4536ba0422562ff7a598",
          "Name": "solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "adc7c970c01e4be5a66dd52ae9cddc92",
          "Name": "Solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The boolean union of this Solid and another.\n\nSolid.Union (solid: Solid): Solid"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Sphere.ByCenterPointRadius@Autodesk.DesignScript.Geometry.Point,double",
      "Id": "a5f89eb0ebbc47038d77cdc55f650a5d",
      "Inputs": [
        {
          "Id": "dbe4fb041b6d4ba48686dd761da35b0f",
          "Name": "centerPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9a3e1aa1170249c7ba8f8da5301faffb",
          "Name": "radius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "38a13142f22d483e9df84d84e033aad5",
          "Name": "Sphere",
          "Description": "Sphere",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Solid Sphere cetered at the input Point, with given radius.\n\nSphere.ByCenterPointRadius (centerPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), radius: double = 1): Sphere"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "c_pt=Point.ByCoordinates(10,15,2.5);\nradius=3;\n\nmin_pt=Point.ByCoordinates(8,17,0.5);\nmax_pt=Point.ByCoordinates(12,13,4.5);",
      "Id": "e11e75d88cae4a98828ec5521ef894ef",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "25eed006da3449708085b23bcaf5f5ad",
          "Name": "",
          "Description": "c_pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ff9125a2ca874d7aa655aa4d1ade82d9",
          "Name": "",
          "Description": "radius",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c83bd21af8da4180af3e6ce057d43418",
          "Name": "",
          "Description": "min_pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ea0fac4d430f4bddb5f9d919cbab58b2",
          "Name": "",
          "Description": "max_pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Cuboid.ByCorners@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point",
      "Id": "a0d373a3ada34d798ee1ab4011dcb58a",
      "Inputs": [
        {
          "Id": "e4a7bffafcb543d1a3b7ff2b6a7b4c8f",
          "Name": "lowPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0602b75f08ab49f1920362091a5a90c1",
          "Name": "highPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(1, 1, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bfb0fc100520444da6d492c7745ac251",
          "Name": "Cuboid",
          "Description": "Cuboid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create an Cuboid spanning from low Point to high Point.\n\nCuboid.ByCorners (lowPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), highPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(1, 1, 1)): Cuboid"
    },
    {
      "ConcreteType": "Watch3DNodeModels.Watch3D, Watch3DNodeModels",
      "WatchWidth": 200.0,
      "WatchHeight": 200.0,
      "WasExecuted": true,
      "Camera": {
        "Name": "96fac099-6707-4bdb-92c5-93f87c7d4bd4 Preview",
        "EyeX": -17.0,
        "EyeY": 24.0,
        "EyeZ": 50.0,
        "LookX": 12.0,
        "LookY": -13.0,
        "LookZ": -58.0,
        "UpX": 0.0,
        "UpY": 1.0,
        "UpZ": 0.0
      },
      "NodeType": "ExtensionNode",
      "Id": "96fac09967074bdb92c593f87c7d4bd4",
      "Inputs": [
        {
          "Id": "917a16b5e18b4e8abad0a13bcc1d15ad",
          "Name": "",
          "Description": "Incoming geometry objects.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "af9f6555439f47868f740b24dfac592f",
          "Name": "",
          "Description": "Incoming geometry objects.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Shows a dynamic preview of geometry."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Solid.Difference@Autodesk.DesignScript.Geometry.Solid",
      "Id": "a6dfe7a96e2643d2a85e8ec7e65340fd",
      "Inputs": [
        {
          "Id": "104a0cd8606446f4ac0e7bf1e738daed",
          "Name": "solid",
          "Description": "Autodesk.DesignScript.Geometry.Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "02c59f780d5142b0954f036780dca567",
          "Name": "other",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c74c39ee569343adbad53918edbce529",
          "Name": "Solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The boolean difference of this Solid with another\n\nSolid.Difference (other: Solid): Solid"
    },
    {
      "ConcreteType": "Watch3DNodeModels.Watch3D, Watch3DNodeModels",
      "WatchWidth": 200.0,
      "WatchHeight": 200.0,
      "WasExecuted": true,
      "Camera": {
        "Name": "eccf618a-469b-4ffa-889f-c4737bf3748b Preview",
        "EyeX": -17.0,
        "EyeY": 24.0,
        "EyeZ": 50.0,
        "LookX": 12.0,
        "LookY": -13.0,
        "LookZ": -58.0,
        "UpX": 0.0,
        "UpY": 1.0,
        "UpZ": 0.0
      },
      "NodeType": "ExtensionNode",
      "Id": "eccf618a469b4ffa889fc4737bf3748b",
      "Inputs": [
        {
          "Id": "e144a05b8dad4737826afeb99905ad0c",
          "Name": "",
          "Description": "Incoming geometry objects.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "43ffc3c8616c4b92b5add6b9c32b698b",
          "Name": "",
          "Description": "Incoming geometry objects.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Shows a dynamic preview of geometry."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Intersect@Autodesk.DesignScript.Geometry.Geometry",
      "Id": "ce0b0c515fd54019825ecf8fbb8aec46",
      "Inputs": [
        {
          "Id": "4f57ac36f5794860b8b1db364d0c7827",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8bc22855f52c4ac7bafffdb70afa370a",
          "Name": "other",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "64ccabe480f743b08211f7f3283bfae0",
          "Name": "Geometry[]",
          "Description": "Geometry[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the intersection Geometry for this object and another\n\nGeometry.Intersect (other: Geometry): Geometry[]"
    },
    {
      "ConcreteType": "Watch3DNodeModels.Watch3D, Watch3DNodeModels",
      "WatchWidth": 200.0,
      "WatchHeight": 200.0,
      "WasExecuted": true,
      "Camera": {
        "Name": "65c00647-7cca-403c-ab88-61137725e143 Preview",
        "EyeX": -17.0,
        "EyeY": 24.0,
        "EyeZ": 50.0,
        "LookX": 12.0,
        "LookY": -13.0,
        "LookZ": -58.0,
        "UpX": 0.0,
        "UpY": 1.0,
        "UpZ": 0.0
      },
      "NodeType": "ExtensionNode",
      "Id": "65c006477cca403cab8861137725e143",
      "Inputs": [
        {
          "Id": "118dd3c122074dd68580a7727fd81b40",
          "Name": "",
          "Description": "Incoming geometry objects.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c746137daafa4394835f365d04d41877",
          "Name": "",
          "Description": "Incoming geometry objects.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Shows a dynamic preview of geometry."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "pt = Point.ByCoordinates([0, 5, 5, 0], [0, 0, 5, 5]);\npt_lst = [Get.ValueAtIndex(pt, 0), Get.ValueAtIndex(pt, 1), Get.ValueAtIndex(pt, 2), Get.ValueAtIndex(pt, 3)];\nis_close = true;\ncenter_pt = Get.ValueAtIndex(pt, 0);\nradius = 1.5;\nvector1 = Vector.YAxis();\ncircle1 = Circle.ByCenterPointRadiusNormal(center_pt, radius, vector1);\nnurbsCurve1 = NurbsCurve.ByPoints(pt_lst, is_close);\ncircle = circle1;\ncurve = nurbsCurve1;\nsolid = circle.SweepAsSolid(curve);\nMesh0 = Dynamo.Mesh.ByGeometry(solid, -1, 512);\nMesh1 = Dynamo.Mesh.Explode(Mesh0);",
      "Id": "3c006bdd512a4e8594166e909a8dec61",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9d4f290410b249c39e2a93c64c57c76a",
          "Name": "",
          "Description": "pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5165daf4b83e48aea4e56e22de5fa43a",
          "Name": "",
          "Description": "pt_lst",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3075148c98de40c2bd42a69b7d3b16ec",
          "Name": "",
          "Description": "is_close",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "38160b1ef6c04c038dc6d897140bf575",
          "Name": "",
          "Description": "center_pt",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a61b1e37cad94a48912f8743c5ec6999",
          "Name": "",
          "Description": "radius",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fd16b3dd16c14432aacf00d150a5cb0c",
          "Name": "",
          "Description": "vector1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "639aa689071b40e18f6006a7dee64729",
          "Name": "",
          "Description": "circle1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "433fbaed6e0a4f32a2bad8a4df7f1a1c",
          "Name": "",
          "Description": "nurbsCurve1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eaa6cdd1d81c498a9372e95235e9319a",
          "Name": "",
          "Description": "circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6796ec9abd724497ac9ea40843cc0e65",
          "Name": "",
          "Description": "curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c7d635a5f94d4e55b016644f4704ffbb",
          "Name": "",
          "Description": "solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fd99341d5f9d4b0fb4584e92279a5dd5",
          "Name": "",
          "Description": "Mesh0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dc7b0d6e211d4935a240a4fa5b2a136c",
          "Name": "",
          "Description": "Mesh1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "start_point=Point.ByCoordinates(6, 15, 2);\ncp_1=Point.ByCoordinates(11, 15, 2);\ncp_2=Point.ByCoordinates(9, 15, 5);\ncp_3=Point.ByCoordinates(12.5, 15, 7);\nend_point=Point.ByCoordinates(13, 15, 8);\npt_lst=[start_point, cp_1, cp_2, cp_3, end_point];",
      "Id": "adc8be7cd22041d7999a2ae96ae42e7f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d603c239e88e4a0d9d311e4a2dffbffb",
          "Name": "",
          "Description": "start_point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5da9cf69321843929380462f0189749a",
          "Name": "",
          "Description": "cp_1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3da3ca3abf924a4f952d1274f84a7880",
          "Name": "",
          "Description": "cp_2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "edbd1df6b55049239c8cedba57f056d9",
          "Name": "",
          "Description": "cp_3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "47232db7ada3451fb754305c3dbe7d29",
          "Name": "",
          "Description": "end_point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "555d9c5b3aaf4df386168fb92f0e473d",
          "Name": "",
          "Description": "pt_lst",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.NurbsCurve.ByControlPoints@Autodesk.DesignScript.Geometry.Point[],int",
      "Id": "d4e593c475ba460aa1508c42f10aae96",
      "Inputs": [
        {
          "Id": "5588c500d500420f9d44668992055adf",
          "Name": "points",
          "Description": "Point[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1365d761957f42d1b0a38a947a777e1e",
          "Name": "degree",
          "Description": "int\nDefault value : 3",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fd1541a0b6ac4e70abd4a73e9dac8f09",
          "Name": "NurbsCurve",
          "Description": "NurbsCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a BSplineCurve by using explicit control points. NOTE 1: BSplineCurves with deg=1 have G1 discontinuities, which cause problems for extrusion, sweep, and other operations. They should be avoided. Use a PolyCurve instead. NOTE 2: If the curve is periodic (closed), then the first and last points MUST be the same.\n\nNurbsCurve.ByControlPoints (points: Point[], degree: int = 3): NurbsCurve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Circle.ByCenterPointRadiusNormal@Autodesk.DesignScript.Geometry.Point,double,Autodesk.DesignScript.Geometry.Vector",
      "Id": "c35087fb4e584c71ac1ba52e3f667dda",
      "Inputs": [
        {
          "Id": "275be80d2e484b5f98edc583f4f9efbf",
          "Name": "centerPoint",
          "Description": "Point\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e09782b5a45f4109859dfbbb8094297a",
          "Name": "radius",
          "Description": "double\nDefault value : 1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e51f7dfecfcf4f57a5fb5e92e6fb3080",
          "Name": "normal",
          "Description": "Vector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "95dacbfd44d8443d8c58101703f46d2e",
          "Name": "Circle",
          "Description": "Circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a Circle with specified center Point, radius, and normal direction.\n\nCircle.ByCenterPointRadiusNormal (centerPoint: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), radius: double = 1, normal: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)): Circle"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.YAxis",
      "Id": "1441850a200549289798a124bdb7a44e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d13726a4e7494ed7bda4f28f519db49e",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Y axis Vector (0,1,0)\n\nVector.YAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "r=0.5;",
      "Id": "19916e7686f14eabb567d46bdd36f92d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7d8b8434749742419f86c278652ba738",
          "Name": "",
          "Description": "r",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "solid=circle.SweepAsSolid(curve);",
      "Id": "3558019e86e6442e8e6e9ad26136e468",
      "Inputs": [
        {
          "Id": "f3863eca3aad449982c5d069b287dc75",
          "Name": "circle",
          "Description": "circle",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a3ff690ea8114520b87205d55e0051ab",
          "Name": "curve",
          "Description": "curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d612219bd825430d8906bac2974d5c77",
          "Name": "",
          "Description": "solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.XAxis",
      "Id": "300c8adc3b004809999bf8260a8da1ff",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8132c5809a8c4c678b053f63bc4c83e4",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical X axis Vector (1,0,0)\n\nVector.XAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Solid.Union@Autodesk.DesignScript.Geometry.Solid",
      "Id": "ab4f60852b9c449a8961c20d6afc3396",
      "Inputs": [
        {
          "Id": "bffb079b3a3748a289e6351998e11c94",
          "Name": "solid",
          "Description": "Autodesk.DesignScript.Geometry.Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "35e0b1ffd92541049dfc9ff9fcb8cc2c",
          "Name": "solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "040c14f6702a4565aa329850e14d7288",
          "Name": "Solid",
          "Description": "Solid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The boolean union of this Solid and another.\n\nSolid.Union (solid: Solid): Solid"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\nmesh_lst = IN[0]\r\ngeo_name = IN[1]\r\ngeo_type = IN[2]\r\ngeometry = IN[3]\r\n\r\ngeo_lst = []\r\ngeo_data = []\r\nfor mesh in mesh_lst:\r\n    geo_data.append(Mesh.Vertices(mesh))\r\n    \r\ngeo_lst.append((geo_data, geo_name, geo_type, geometry))\r\n# Assign your output to the OUT variable.\r\nOUT = geo_lst",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "94f79f31b987404fbc5f67689cc996e8",
      "Inputs": [
        {
          "Id": "d5a93eed089f418fa6b0d9de9c55db99",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "016cc1644a704285967426b422682989",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "246e684b45d44a78b82049a3a9345772",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bc07ada49fa54a3cb016f4e6c67175b9",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d60da7073713403584e1438d43a9d534",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport json\r\nimport os\r\nimport random\r\nimport pickle\r\nimport io\r\nimport ctypes\r\nimport math\r\nimport xml.etree.ElementTree as ET\r\nsys.path.append(r\"C:\\Users\\yhe\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\")\r\nfrom xml.dom.minidom import parse, parseString\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\ndef Mesh_to_WKT(solid, solid_name):\r\n    #sphere_mesh = Mesh.ByGeometry(solid)\r\n    #mesh_lst = Mesh.Explode(sphere_mesh)\r\n    mesh_lst=solid\r\n    mesh_vert_lst = []\r\n    \r\n    for mesh in mesh_lst:\r\n        mesh_vert_lst.append(Mesh.Vertices(mesh))\r\n        \r\n    geo_data = mesh_vert_lst\r\n    geo_name = \"MULTIPOLYGON\" + \"-\" + str(solid_name)\r\n    geo_type = \"MULTIPOLYGON_MESH\"\r\n    geometry = solid\r\n    geo_obj_solid = (geo_data, geo_name, geo_type, geometry)\r\n\r\n    return geo_obj_solid\r\n\r\n#################### WKT Converter #############################\r\ndef sphere2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n\r\ndef mesh2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n    \r\ndef multipolygonInRotation2WKT(face_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    face_wkt_lst = \"\"\r\n    \r\n    for face in face_lst:\r\n        \r\n        vertice_lst = face.Vertices\r\n        org_vert_pt = vertice_lst[0].PointGeometry \r\n        face_wkt = \"((\" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) # start point\r\n    \r\n        for i in range(1, len(vertice_lst)):\r\n            vert_pt = vertice_lst[i].PointGeometry\r\n            face_wkt += \", \" + str(vert_pt.X) + \" \" +  str(vert_pt.Y) + \" \" +  str(vert_pt.Z)       \r\n        face_wkt += \", \" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) + \"))\" # end point\r\n        \r\n        if(face != face_lst[-1]):\r\n            face_wkt += \", \"\r\n        face_wkt_lst += face_wkt        \r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\" \r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for cuboids with geometry = [centroid, length]\r\n    centroid = Solid.Centroid(geo_data)\r\n    offset = geo_data.Length/2\r\n    c_X = centroid.X\r\n    c_Y = centroid.Y\r\n    c_Z = centroid.Z\r\n\r\n    # idea: determine the coordinates of bottom- and top faces\r\n    \r\n    # p1 -- p2\r\n    # |  c   |\r\n    # p3 -- p4           \r\n    # bottom-face\r\n    bottom_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    bottom_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    bottom_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_face = \"((\" + bottom_p1 + \", \" + bottom_p2 + \", \" + bottom_p3 + \", \" + bottom_p4 +  \", \" + bottom_p1 + \"))\"\r\n    # top-face\r\n    top_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    top_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    top_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_face = \"((\" + top_p1 + \", \" + top_p2 + \", \" + top_p3 + \", \" + top_p4 +  \", \" + top_p1 + \"))\"\r\n    # front-face\r\n    front_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    front_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    front_p3 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    front_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    front_face = \"((\" + front_p1 + \", \" + front_p2 + \", \" + front_p3 + \", \" + front_p4 + \", \" + front_p1 + \"))\"\r\n    # back-face             \r\n    back_p1 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    back_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    back_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    back_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    back_face = \"((\" + back_p1 + \", \" + back_p2 + \", \" + back_p3 + \", \" + back_p4 + \", \" + back_p1 + \"))\"\r\n    # left-face\r\n    left_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p2 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p3 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_face = \"((\" + left_p1 + \", \" + left_p2 + \", \" + left_p3 + \", \" + left_p4 + \", \" + left_p1 + \"))\"            \r\n    # right-face\r\n    right_p1 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_p4 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_face = \"((\" + right_p1 + \", \" + right_p2 + \", \" + right_p3 + \", \" + right_p4 + \", \" + right_p1 + \"))\"\r\n    \r\n    cuboid_face = bottom_face + \", \" + top_face + \", \" + front_face + \", \" + back_face + \", \" + left_face + \", \" + right_face\r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    try:\r\n        wktLiteral += cuboid_face\r\n    except e:\r\n        return e\r\n    print(cuboid_face)\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:POLYGON>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    wktLiteral += \"POLYGON Z((\";\r\n    \r\n    points =  geo_data\r\n    originP = points[0];\r\n    \r\n    wktLiteral += str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z) # start point\r\n    for i in range(1, len(points)):\r\n        wktLiteral += \", \" + str(points[i].X) + \" \" +  str(points[i].Y) + \" \" +  str(points[i].Z);       \r\n    wktLiteral += \", \" + str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z); # end point\r\n    wktLiteral += \"))\"\r\n    \r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:POLYGON>\";\r\n    return wktLiteral\r\n\r\n#####\r\ndef wkt_Converter(geo_obj):\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n    geoSparqlNamespace = \"http://www.opengis.net/ont/geosparql#\"\r\n    exampleInstanceNamespace = \"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\"\r\n    \r\n    res = []\r\n    geo_data = geo_obj[0];\r\n    name = geo_obj[1];\r\n    geometryType = geo_obj[2];\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_ROTATION\"):\r\n        res.append(multipolygonInRotation2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_SPHERE\"):\r\n        res.append(sphere2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n        \r\n    if(geometryType.upper() == \"MULTIPOLYGON_MESH\"):\r\n        res.append(mesh2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n     \r\n    if(geometryType.upper() == \"MULTIPOLYGON\"):\r\n        res.append(multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON_ROTATION\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"LINESTRING\"):\r\n        res.append(lineString2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    return res\r\n\r\n############## RDF Wrapper ###############\r\ndef RDF_Wrapper(WKT_res):\r\n    rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\r\n    owl=\"http://www.w3.org/2002/07/owl#\";\r\n    ogc=\"http://www.opengis.net/\";\r\n    my=\"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\";\r\n    gml=\"http://www.opengis.net/ont/gml#\";\r\n    geo=\"http://www.opengis.net/ont/geosparql#\";\r\n    geof=\"http://www.opengis.net/def/function/geosparql/\";\r\n    rdfs=\"http://www.w3.org/2000/01/rdf-schema#\";\r\n    uom=\"http://www.opengis.net/def/uom/OGC/1.0/\";\r\n    sf=\"http://www.opengis.net/ont/sf#\";\r\n    xsd=\"http://www.w3.org/2001/XMLSchema#\";\r\n    geor=\"http://www.opengis.net/def/rule/geosparql/\";\r\n    namespaces = {\t\"rdf\" : rdf,\r\n                \t\"owl\" : owl,\r\n                \t\"ogc\" : ogc,\r\n                \t\"my\" : my,\r\n                \t\"gml\" : gml,\r\n                \t\"geo\" : geo,\r\n                \t\"geof\": geof,\r\n                \t\"rdfs\": rdfs,\r\n                \t\"uom\": uom,\r\n                \t\"sf\": sf,\r\n                \t\"xsd\": xsd,\r\n                \t\"geor\": geor\r\n            }\r\n    inserts = WKT_res\r\n    \r\n    # open RDF header\r\n    rdfStr = \"<rdf:RDF\";\r\n    \r\n    # handle Namespaces\r\n    for key in namespaces:\r\n        rdfStr += \" xmlns:\" + key + \"='\" + namespaces[key] + \"'\";\r\n    \r\n    rdfStr += \">\";\r\n    \r\n    #add inserts\r\n    \r\n    rdfStr += \"<rdf:Description rdf:about='my:\" + \"RootModel\" + \"'>\";\r\n    \r\n    for insert in inserts:\r\n        rdfStr += insert;\r\n    \r\n    rdfStr += \"</rdf:Description>\"\r\n    \r\n    # close RDF header\r\n    rdfStr += \"</rdf:RDF>\"\r\n    \r\n    # Weisen Sie Ihre Ausgabe der OUT-Variablen zu.\r\n    return rdfStr\r\n\r\n############## Ground Truth Generator ###############\r\ndef getGeometry(geo_obj):\r\n    return geo_obj[3]\r\n\r\ndef getGeoType(geo_obj):\r\n    return geo_obj[2]\r\n    \r\ndef getGeoName(geo_obj):\r\n    return geo_obj[1]\r\n    \r\ndef ground_truth_generator(geometry_lst):\r\n    geo_lst = geometry_lst\r\n    inter_geo_dict = {}\r\n    for i in range(0, len(geo_lst)-1):\r\n        geo_obj_1 = geo_lst[i]\r\n        geometry_1 = getGeometry(geo_obj_1)\r\n    \r\n        geo_obj_1_has_intersection = False\r\n        for j in range(1, len(geo_lst)):\r\n            geo_obj_2 = geo_lst[j]\r\n            geometry_2 = getGeometry(geo_obj_2)\r\n            \r\n            if getGeoName(geo_obj_1) != getGeoName(geo_obj_2):\r\n                temp_bool = False\r\n                try:\r\n                    temp_bool = Geometry.DoesIntersect(geometry_1, geometry_2)\r\n                except Exception as err:\r\n                    print(f\"Unexpected {err=}, {type(err)=}\")\r\n                if temp_bool:\r\n                    geo_obj_1_has_intersection = True\r\n                    inter_geo_dict[getGeoName(geo_obj_2)] = getGeoType(geo_obj_2)\r\n                    \r\n        if geo_obj_1_has_intersection:\r\n            inter_geo_dict[getGeoName(geo_obj_1)] = getGeoType(geo_obj_1)    \r\n    #================= Output ====================\r\n    if inter_geo_dict is None:\r\n        inter_geo_dict = {}\r\n    return inter_geo_dict\r\n    \r\n############## RDF 2 JSON ###############\r\ndef rdfParsing2GeoData(str):\r\n    \"\"\" it returns the json file in structure like { \"POLYGON1\" : [...], \r\n                                                     \"POLYGON2\" : [...], \r\n                                                     \"MULTIPOLYGON1\" : [...], ...\r\n                                                    }\r\n    \"\"\"\r\n    #dom = parse(path)\r\n    #tree = ET.ElementTree(ET.fromstring(str))\r\n    geo_dict = {}\r\n    tree = io.StringIO(str)\r\n    dom = parse(tree)\r\n    data = dom.documentElement\r\n    rdf_desc_lst = data.getElementsByTagName(\"rdf:Description\")\r\n    # geo_in_wkt = data.getElementsByTagName(\"geo:asWKT\")\r\n\r\n    for i in range(1, len(rdf_desc_lst)): # first description element (root element) should be removed.\r\n        descr_el = rdf_desc_lst[i]\r\n        geo_name_num = descr_el.attributes._attrs['rdf:about'].nodeValue.split('#')[1]\r\n        geo_wkt_data = \"\"\r\n        try:\r\n            geo_wkt_data = descr_el.childNodes[0].firstChild.data\r\n        except:\r\n            geo_wkt_data = descr_el.childNodes[1].firstChild.data\r\n        geo_algebra_lst = []\r\n\r\n        if ( geo_name_num.find('POINT') != -1 or\r\n            geo_name_num.find('Point') != -1 ):\r\n            \r\n            wkt_data_lst = geo_wkt_data.split(\"(\")[1] # remove title 'POINT'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n\r\n            pt_algebra_lst = []\r\n            pt_str_lst = vert_str_lst.split(\" \")\r\n\r\n            pt_algebra_lst = [ float(pt_str) for pt_str in pt_str_lst ]\r\n            geo_algebra_lst.append(pt_algebra_lst)\r\n            \r\n        if ( geo_name_num.find('LINESTRING') != -1 or\r\n            geo_name_num.find('Linestring') != -1 or\r\n            geo_name_num.find('LINE') != -1 or\r\n            geo_name_num.find('Line') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'LINESTRING'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            line_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)):\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                line_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(line_algebra_lst)\r\n\r\n        if ( geo_name_num.find('POLYGON') != -1 or \r\n            geo_name_num.find('Polygon') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'POLYGON Z'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            face_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                face_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(face_algebra_lst)\r\n\r\n        if ( geo_name_num.find('MULTIPOLYGON') != -1 or\r\n            geo_name_num.find('Multipolygon') != -1  or\r\n            geo_name_num.find('CUBE') != -1 or\r\n            geo_name_num.find('Cube') != -1 or\r\n            geo_name_num.find('SPHERE') != -1 or\r\n            geo_name_num.find('Sphere') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"(((\")[1] # remove title 'MULTIPOLYGON Z'\r\n            face_str_lst = wkt_data_lst.split(\"), \")\r\n\r\n            face_algebra_lst = []\r\n            for face_str in face_str_lst:\r\n                vert_str_lst = face_str.replace( \")\", \"\" ) # remove character ')'\r\n                vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n                vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n                pt_algebra_lst = []\r\n                for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                    pt_str_lst = vert_str_lst[i].split(\" \")\r\n                        \r\n                    pt_algebra = [ float(pt_str) for pt_str in pt_str_lst ]\r\n                    pt_algebra_lst.append(pt_algebra)\r\n\r\n                face_algebra_lst.append(pt_algebra_lst)\r\n            geo_algebra_lst = face_algebra_lst\r\n\r\n        if geo_name_num not in geo_dict.keys():\r\n            geo_dict[geo_name_num] = geo_algebra_lst\r\n    return geo_dict\r\n    \r\n######################################################\r\n############## RDF File Configuration ###############\r\nrdf_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\rdf\\\\case_study\\\\\"\r\nrdf_file_contents = \"\"\r\n\r\n############## JSON File Configuration ###############\r\njson_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\case_study\\\\\"\r\njson_ground_truth_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\ground_truth\\\\\"\r\njson_file_contents = {\"test\":\"\"}\r\n\r\n########## JSON Export #############\r\ndef JSON_export(json_file_path, json_file_name, json_file_contents):\r\n    \r\n    tmp_json_file_path = json_file_path + json_file_name\r\n    try:\r\n        with open(tmp_json_file_path, \"w\") as f:\r\n            json.dump(json_file_contents, f, sort_keys=True, indent=4)\r\n            #f.write(json_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{json_file_path}' already exists.\")\r\n\r\n########## RDF Export #############\r\ndef rdf_export(rdf_file_path, rdf_file_name, rdf_file_contents):\r\n\r\n    tmp_rdf_file_path = rdf_file_path + rdf_file_name\r\n    try:\r\n        with open(tmp_rdf_file_path, \"w\") as f:\r\n            f.write(rdf_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{rdf_file_path}' already exists.\")\r\n        \r\n        \r\n############## Contents (RDF, JSON) Generation ###############\r\n# create geometries randomly\r\ntmp_geo_lst = Mesh_to_WKT(IN[0], IN[1])\r\n# convert geos to WKT\r\nwkt_res = wkt_Converter(tmp_geo_lst)\r\n# wrapp WKT with RDF labels\r\nrdf_contents = RDF_Wrapper(wkt_res)\r\n# store RDF file locally\r\nrdf_export(rdf_case_study_file_path, \"secCaseStudy_Solid.rdf\", rdf_contents)\r\n# convert RDF file to JSON file and store it locally\r\nrdf_2_json_contents = rdfParsing2GeoData(rdf_contents)\r\nJSON_export(json_case_study_file_path, \"secCaseStudy_Solid.json\", rdf_2_json_contents)\r\n\r\n#====================================\r\nOUT = 0",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "1896c6058bd34f9296f4b4a287756c4d",
      "Inputs": [
        {
          "Id": "5af4433504b84c51a6b9019b70fcaca3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f7a4f776573747b3b990be49171b50c6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c29b26e1064f4949918f2d380157450f",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Tube\";",
      "Id": "b0a217a025f74f13808f7a0cc344b1a1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a602481473744f8795446d8faae840af",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport random\r\nimport pickle\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\n# random sphere(s)\r\nfor i in range(0, 1):\r\n    \r\n    x_axis = random.randint(-10, 10)\r\n    y_axis = random.randint(-10, 10)\r\n    z_axis = random.randint(-10, 10)\r\n    offset_lst = random.sample(range(-50, 50, 2), 3)    \r\n    \r\n    centroid_pt = Point.ByCoordinates(x_axis + offset_lst[0], \r\n                                     y_axis + offset_lst[1], \r\n                                     z_axis + offset_lst[2])\r\n    \r\n    #rand_radius = random.randint(1, 7)\r\n    \r\n    geometry = Sphere.ByCenterPointRadius(centroid_pt, radius = 2)\r\n\r\n    sphere_mesh = Mesh.ByGeometry(geometry)\r\n    mesh_lst = Mesh.Explode(sphere_mesh)\r\n    mesh_vert_lst = []\r\n    for mesh in mesh_lst:\r\n        mesh_vert_lst.append(Mesh.Vertices(mesh))\r\n\r\nOUT=mesh_vert_lst",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "d7270de632a54357a907a75d0f7bce84",
      "Inputs": [
        {
          "Id": "ab5399ff93de4207a5b36bc0b4ae3501",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6729f5384ee546cf98bf8452be9e05ab",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "ea77bc741ef5496fb6d3411628d9462f",
      "Inputs": [
        {
          "Id": "36af1892260842188764a5522542a481",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "00e617158c18449ba4761f2613e34a87",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.Dynamo.MeshToolkit.Mesh.ByGeometry@Autodesk.DesignScript.Geometry.Geometry,double,int",
      "Id": "0426ec7bd99d4ed3b961468e48e461c8",
      "Inputs": [
        {
          "Id": "bef2b93049c94e21a41594d8e7d466d8",
          "Name": "inputGeometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "38aff1fdbdd54d6699d41bc32417049b",
          "Name": "tolerance",
          "Description": "double\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "43891a46381140568ab370411f67fa0c",
          "Name": "maxGridLines",
          "Description": "int\nDefault value : 512",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dc39c7c07eb041fcb5d34aad2624a3f2",
          "Name": "Mesh",
          "Description": "Mesh",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Convert a Geometry object such as a Solid or Surface into a Mesh. The resolution of the mesh is determined by the Dynamo render precision\n\nMesh.ByGeometry (inputGeometry: Geometry, tolerance: double = -1, maxGridLines: int = 512): Mesh"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.Dynamo.MeshToolkit.Mesh.Explode",
      "Id": "6108c0576bcb452fbb121645fc9db4e6",
      "Inputs": [
        {
          "Id": "9b5d4af8af5441ffbb3e95a4660bd113",
          "Name": "mesh",
          "Description": "Autodesk.Dynamo.MeshToolkit.Mesh",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aefe0eb55ad847cb862825b945fd5835",
          "Name": "Mesh[]",
          "Description": "Mesh[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts Mesh triangles to individual meshes and returns them.\n\nMesh.Explode ( ): Mesh[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport random\r\nimport pickle\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\n# random sphere(s)\r\nmesh_vert_lst = []\r\nfor mesh in IN[0][0]:\r\n    mesh_vert_lst.append(Mesh.Vertices(mesh))\r\n\r\nOUT=mesh_vert_lst\r\n",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "b19f331b287e452c82062f00cc797a91",
      "Inputs": [
        {
          "Id": "4bfa4a70b640448ebdfddee69932fdc3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "57005050b0244c60a6117a64f9d4d521",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "b81ba6417885454fbd54dee36e049c77",
      "Inputs": [
        {
          "Id": "7f93b7cacdbb479ea35ba1ab6a148e2e",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bb090771548f4b7a9b65ca188d351207",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport json\r\nimport os\r\nimport random\r\nimport pickle\r\nimport io\r\nimport ctypes\r\nimport math\r\nimport xml.etree.ElementTree as ET\r\nsys.path.append(r\"C:\\Users\\yhe\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\")\r\nfrom xml.dom.minidom import parse, parseString\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\n# Place your code below this line\r\ndef mesh2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n# Assign your output to the OUT variable.\r\ngeoSparqlNamespace = \"http://www.opengis.net/ont/geosparql#\"\r\nexampleInstanceNamespace = \"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\"\r\nOUT = mesh2WKT(IN[0],  exampleInstanceNamespace, geoSparqlNamespace, IN[1])",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "4fad054dd1c645fa98b6b1d517d734e0",
      "Inputs": [
        {
          "Id": "9e203b81eacf41ada186b0acb780e140",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e9a4c41e19774651b911f14bc8bd9d1a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0db74c2d55fb42c5b1a4204cf9b6e87b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "259aee5cfe3b45d38e4f2783ce2f70a6",
      "Inputs": [
        {
          "Id": "23ddae57c79049b981129289f871cb78",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ed5c37b8e63549f3a6ba212a7541ffe6",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport json\r\nimport os\r\nimport random\r\nimport pickle\r\nimport io\r\nimport ctypes\r\nimport math\r\nimport xml.etree.ElementTree as ET\r\nsys.path.append(r\"C:\\Users\\yhe\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\")\r\nfrom xml.dom.minidom import parse, parseString\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\ndef Mesh_to_WKT(solid, solid_name):\r\n    #sphere_mesh = Mesh.ByGeometry(solid)\r\n    #mesh_lst = Mesh.Explode(sphere_mesh)\r\n    mesh_lst=solid\r\n    mesh_vert_lst = []\r\n    \r\n    for mesh in mesh_lst:\r\n        mesh_vert_lst.append(Mesh.Vertices(mesh))\r\n        \r\n    geo_data = mesh_vert_lst\r\n    geo_name = \"MULTIPOLYGON\" + \"-\" + str(solid_name)\r\n    geo_type = \"MULTIPOLYGON_MESH\"\r\n    geometry = solid\r\n    geo_obj_solid = (geo_data, geo_name, geo_type, geometry)\r\n\r\n    return geo_obj_solid\r\n\r\n#################### WKT Converter #############################\r\ndef sphere2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n\r\ndef mesh2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n    \r\ndef multipolygonInRotation2WKT(face_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    face_wkt_lst = \"\"\r\n    \r\n    for face in face_lst:\r\n        \r\n        vertice_lst = face.Vertices\r\n        org_vert_pt = vertice_lst[0].PointGeometry \r\n        face_wkt = \"((\" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) # start point\r\n    \r\n        for i in range(1, len(vertice_lst)):\r\n            vert_pt = vertice_lst[i].PointGeometry\r\n            face_wkt += \", \" + str(vert_pt.X) + \" \" +  str(vert_pt.Y) + \" \" +  str(vert_pt.Z)       \r\n        face_wkt += \", \" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) + \"))\" # end point\r\n        \r\n        if(face != face_lst[-1]):\r\n            face_wkt += \", \"\r\n        face_wkt_lst += face_wkt        \r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\" \r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for cuboids with geometry = [centroid, length]\r\n    centroid = Solid.Centroid(geo_data)\r\n    offset = geo_data.Length/2\r\n    c_X = centroid.X\r\n    c_Y = centroid.Y\r\n    c_Z = centroid.Z\r\n\r\n    # idea: determine the coordinates of bottom- and top faces\r\n    \r\n    # p1 -- p2\r\n    # |  c   |\r\n    # p3 -- p4           \r\n    # bottom-face\r\n    bottom_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    bottom_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    bottom_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_face = \"((\" + bottom_p1 + \", \" + bottom_p2 + \", \" + bottom_p3 + \", \" + bottom_p4 +  \", \" + bottom_p1 + \"))\"\r\n    # top-face\r\n    top_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    top_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    top_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_face = \"((\" + top_p1 + \", \" + top_p2 + \", \" + top_p3 + \", \" + top_p4 +  \", \" + top_p1 + \"))\"\r\n    # front-face\r\n    front_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    front_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    front_p3 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    front_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    front_face = \"((\" + front_p1 + \", \" + front_p2 + \", \" + front_p3 + \", \" + front_p4 + \", \" + front_p1 + \"))\"\r\n    # back-face             \r\n    back_p1 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    back_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    back_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    back_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    back_face = \"((\" + back_p1 + \", \" + back_p2 + \", \" + back_p3 + \", \" + back_p4 + \", \" + back_p1 + \"))\"\r\n    # left-face\r\n    left_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p2 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p3 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_face = \"((\" + left_p1 + \", \" + left_p2 + \", \" + left_p3 + \", \" + left_p4 + \", \" + left_p1 + \"))\"            \r\n    # right-face\r\n    right_p1 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_p4 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_face = \"((\" + right_p1 + \", \" + right_p2 + \", \" + right_p3 + \", \" + right_p4 + \", \" + right_p1 + \"))\"\r\n    \r\n    cuboid_face = bottom_face + \", \" + top_face + \", \" + front_face + \", \" + back_face + \", \" + left_face + \", \" + right_face\r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    try:\r\n        wktLiteral += cuboid_face\r\n    except e:\r\n        return e\r\n    print(cuboid_face)\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:POLYGON>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    wktLiteral += \"POLYGON Z((\";\r\n    \r\n    points =  geo_data\r\n    originP = points[0];\r\n    \r\n    wktLiteral += str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z) # start point\r\n    for i in range(1, len(points)):\r\n        wktLiteral += \", \" + str(points[i].X) + \" \" +  str(points[i].Y) + \" \" +  str(points[i].Z);       \r\n    wktLiteral += \", \" + str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z); # end point\r\n    wktLiteral += \"))\"\r\n    \r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:POLYGON>\";\r\n    return wktLiteral\r\n\r\n#####\r\ndef wkt_Converter(geo_obj):\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n    geoSparqlNamespace = \"http://www.opengis.net/ont/geosparql#\"\r\n    exampleInstanceNamespace = \"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\"\r\n    \r\n    res = []\r\n    geo_data = geo_obj[0];\r\n    name = geo_obj[1];\r\n    geometryType = geo_obj[2];\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_ROTATION\"):\r\n        res.append(multipolygonInRotation2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_SPHERE\"):\r\n        res.append(sphere2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n        \r\n    if(geometryType.upper() == \"MULTIPOLYGON_MESH\"):\r\n        res.append(mesh2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n     \r\n    if(geometryType.upper() == \"MULTIPOLYGON\"):\r\n        res.append(multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON_ROTATION\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"LINESTRING\"):\r\n        res.append(lineString2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    return res\r\n\r\n############## RDF Wrapper ###############\r\ndef RDF_Wrapper(WKT_res):\r\n    rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\r\n    owl=\"http://www.w3.org/2002/07/owl#\";\r\n    ogc=\"http://www.opengis.net/\";\r\n    my=\"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\";\r\n    gml=\"http://www.opengis.net/ont/gml#\";\r\n    geo=\"http://www.opengis.net/ont/geosparql#\";\r\n    geof=\"http://www.opengis.net/def/function/geosparql/\";\r\n    rdfs=\"http://www.w3.org/2000/01/rdf-schema#\";\r\n    uom=\"http://www.opengis.net/def/uom/OGC/1.0/\";\r\n    sf=\"http://www.opengis.net/ont/sf#\";\r\n    xsd=\"http://www.w3.org/2001/XMLSchema#\";\r\n    geor=\"http://www.opengis.net/def/rule/geosparql/\";\r\n    namespaces = {\t\"rdf\" : rdf,\r\n                \t\"owl\" : owl,\r\n                \t\"ogc\" : ogc,\r\n                \t\"my\" : my,\r\n                \t\"gml\" : gml,\r\n                \t\"geo\" : geo,\r\n                \t\"geof\": geof,\r\n                \t\"rdfs\": rdfs,\r\n                \t\"uom\": uom,\r\n                \t\"sf\": sf,\r\n                \t\"xsd\": xsd,\r\n                \t\"geor\": geor\r\n            }\r\n    inserts = WKT_res\r\n    \r\n    # open RDF header\r\n    rdfStr = \"<rdf:RDF\";\r\n    \r\n    # handle Namespaces\r\n    for key in namespaces:\r\n        rdfStr += \" xmlns:\" + key + \"='\" + namespaces[key] + \"'\";\r\n    \r\n    rdfStr += \">\";\r\n    \r\n    #add inserts\r\n    \r\n    rdfStr += \"<rdf:Description rdf:about='my:\" + \"RootModel\" + \"'>\";\r\n    \r\n    for insert in inserts:\r\n        rdfStr += insert;\r\n    \r\n    rdfStr += \"</rdf:Description>\"\r\n    \r\n    # close RDF header\r\n    rdfStr += \"</rdf:RDF>\"\r\n    \r\n    # Weisen Sie Ihre Ausgabe der OUT-Variablen zu.\r\n    return rdfStr\r\n\r\n############## Ground Truth Generator ###############\r\ndef getGeometry(geo_obj):\r\n    return geo_obj[3]\r\n\r\ndef getGeoType(geo_obj):\r\n    return geo_obj[2]\r\n    \r\ndef getGeoName(geo_obj):\r\n    return geo_obj[1]\r\n    \r\ndef ground_truth_generator(geometry_lst):\r\n    geo_lst = geometry_lst\r\n    inter_geo_dict = {}\r\n    for i in range(0, len(geo_lst)-1):\r\n        geo_obj_1 = geo_lst[i]\r\n        geometry_1 = getGeometry(geo_obj_1)\r\n    \r\n        geo_obj_1_has_intersection = False\r\n        for j in range(1, len(geo_lst)):\r\n            geo_obj_2 = geo_lst[j]\r\n            geometry_2 = getGeometry(geo_obj_2)\r\n            \r\n            if getGeoName(geo_obj_1) != getGeoName(geo_obj_2):\r\n                temp_bool = False\r\n                try:\r\n                    temp_bool = Geometry.DoesIntersect(geometry_1, geometry_2)\r\n                except Exception as err:\r\n                    print(f\"Unexpected {err=}, {type(err)=}\")\r\n                if temp_bool:\r\n                    geo_obj_1_has_intersection = True\r\n                    inter_geo_dict[getGeoName(geo_obj_2)] = getGeoType(geo_obj_2)\r\n                    \r\n        if geo_obj_1_has_intersection:\r\n            inter_geo_dict[getGeoName(geo_obj_1)] = getGeoType(geo_obj_1)    \r\n    #================= Output ====================\r\n    if inter_geo_dict is None:\r\n        inter_geo_dict = {}\r\n    return inter_geo_dict\r\n    \r\n############## RDF 2 JSON ###############\r\ndef rdfParsing2GeoData(str):\r\n    \"\"\" it returns the json file in structure like { \"POLYGON1\" : [...], \r\n                                                     \"POLYGON2\" : [...], \r\n                                                     \"MULTIPOLYGON1\" : [...], ...\r\n                                                    }\r\n    \"\"\"\r\n    #dom = parse(path)\r\n    #tree = ET.ElementTree(ET.fromstring(str))\r\n    geo_dict = {}\r\n    tree = io.StringIO(str)\r\n    dom = parse(tree)\r\n    data = dom.documentElement\r\n    rdf_desc_lst = data.getElementsByTagName(\"rdf:Description\")\r\n    # geo_in_wkt = data.getElementsByTagName(\"geo:asWKT\")\r\n\r\n    for i in range(1, len(rdf_desc_lst)): # first description element (root element) should be removed.\r\n        descr_el = rdf_desc_lst[i]\r\n        geo_name_num = descr_el.attributes._attrs['rdf:about'].nodeValue.split('#')[1]\r\n        geo_wkt_data = \"\"\r\n        try:\r\n            geo_wkt_data = descr_el.childNodes[0].firstChild.data\r\n        except:\r\n            geo_wkt_data = descr_el.childNodes[1].firstChild.data\r\n        geo_algebra_lst = []\r\n\r\n        if ( geo_name_num.find('POINT') != -1 or\r\n            geo_name_num.find('Point') != -1 ):\r\n            \r\n            wkt_data_lst = geo_wkt_data.split(\"(\")[1] # remove title 'POINT'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n\r\n            pt_algebra_lst = []\r\n            pt_str_lst = vert_str_lst.split(\" \")\r\n\r\n            pt_algebra_lst = [ float(pt_str) for pt_str in pt_str_lst ]\r\n            geo_algebra_lst.append(pt_algebra_lst)\r\n            \r\n        if ( geo_name_num.find('LINESTRING') != -1 or\r\n            geo_name_num.find('Linestring') != -1 or\r\n            geo_name_num.find('LINE') != -1 or\r\n            geo_name_num.find('Line') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'LINESTRING'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            line_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)):\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                line_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(line_algebra_lst)\r\n\r\n        if ( geo_name_num.find('POLYGON') != -1 or \r\n            geo_name_num.find('Polygon') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'POLYGON Z'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            face_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                face_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(face_algebra_lst)\r\n\r\n        if ( geo_name_num.find('MULTIPOLYGON') != -1 or\r\n            geo_name_num.find('Multipolygon') != -1  or\r\n            geo_name_num.find('CUBE') != -1 or\r\n            geo_name_num.find('Cube') != -1 or\r\n            geo_name_num.find('SPHERE') != -1 or\r\n            geo_name_num.find('Sphere') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"(((\")[1] # remove title 'MULTIPOLYGON Z'\r\n            face_str_lst = wkt_data_lst.split(\"), \")\r\n\r\n            face_algebra_lst = []\r\n            for face_str in face_str_lst:\r\n                vert_str_lst = face_str.replace( \")\", \"\" ) # remove character ')'\r\n                vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n                vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n                pt_algebra_lst = []\r\n                for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                    pt_str_lst = vert_str_lst[i].split(\" \")\r\n                        \r\n                    pt_algebra = [ float(pt_str) for pt_str in pt_str_lst ]\r\n                    pt_algebra_lst.append(pt_algebra)\r\n\r\n                face_algebra_lst.append(pt_algebra_lst)\r\n            geo_algebra_lst = face_algebra_lst\r\n\r\n        if geo_name_num not in geo_dict.keys():\r\n            geo_dict[geo_name_num] = geo_algebra_lst\r\n    return geo_dict\r\n    \r\n######################################################\r\n############## RDF File Configuration ###############\r\nrdf_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\rdf\\\\case_study\\\\\"\r\nrdf_file_contents = \"\"\r\n\r\n############## JSON File Configuration ###############\r\njson_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\case_study\\\\\"\r\njson_ground_truth_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\ground_truth\\\\\"\r\njson_file_contents = {}\r\n\r\n########## JSON Export #############\r\ndef JSON_export(json_file_path, json_file_name, json_file_contents):\r\n    \r\n    tmp_json_file_path = json_file_path + json_file_name\r\n    try:\r\n        with open(tmp_json_file_path, \"w\") as f:\r\n            json.dump(json_file_contents, f, sort_keys=True, indent=4)\r\n            #f.write(json_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{json_file_path}' already exists.\")\r\n\r\n########## RDF Export #############\r\ndef rdf_export(rdf_file_path, rdf_file_name, rdf_file_contents):\r\n\r\n    tmp_rdf_file_path = rdf_file_path + rdf_file_name\r\n    try:\r\n        with open(tmp_rdf_file_path, \"w\") as f:\r\n            f.write(rdf_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{rdf_file_path}' already exists.\")\r\n        \r\n        \r\n############## Contents (RDF, JSON) Generation ###############\r\n# create geometries randomly\r\n# convert geos to WKT\r\n# wrapp WKT with RDF labels\r\nrdf_contents = RDF_Wrapper(IN[0])\r\nrdf_export(rdf_case_study_file_path, \"2nd_CaseStudy_CubeSolid.rdf\", rdf_contents)\r\n#====================================\r\nOUT = rdf_contents",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "70df646dab564b76bd894c8ee6c6e7ce",
      "Inputs": [
        {
          "Id": "9aad7fbae23343c6b84b20545d7196e1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "42fbc33623fa49f1895f7b207f307a0e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "c5e640a37a824136a9a3f07f03842310",
      "Inputs": [
        {
          "Id": "721d249ec53b47c9828ff826a5c8ad11",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2fb40fa859454852997607e474bc22c4",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport json\r\nimport os\r\nimport random\r\nimport pickle\r\nimport io\r\nimport ctypes\r\nimport math\r\nimport xml.etree.ElementTree as ET\r\nsys.path.append(r\"C:\\Users\\yhe\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\")\r\nfrom xml.dom.minidom import parse, parseString\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\ndef Mesh_to_WKT(solid, solid_name):\r\n    #sphere_mesh = Mesh.ByGeometry(solid)\r\n    #mesh_lst = Mesh.Explode(sphere_mesh)\r\n    mesh_lst=solid\r\n    mesh_vert_lst = []\r\n    \r\n    for mesh in mesh_lst:\r\n        mesh_vert_lst.append(Mesh.Vertices(mesh))\r\n        \r\n    geo_data = mesh_vert_lst\r\n    geo_name = \"MULTIPOLYGON\" + \"-\" + str(solid_name)\r\n    geo_type = \"MULTIPOLYGON_MESH\"\r\n    geometry = solid\r\n    geo_obj_solid = (geo_data, geo_name, geo_type, geometry)\r\n\r\n    return geo_obj_solid\r\n\r\n#################### WKT Converter #############################\r\ndef sphere2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n\r\ndef mesh2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n    \r\ndef multipolygonInRotation2WKT(face_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    face_wkt_lst = \"\"\r\n    \r\n    for face in face_lst:\r\n        \r\n        vertice_lst = face.Vertices\r\n        org_vert_pt = vertice_lst[0].PointGeometry \r\n        face_wkt = \"((\" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) # start point\r\n    \r\n        for i in range(1, len(vertice_lst)):\r\n            vert_pt = vertice_lst[i].PointGeometry\r\n            face_wkt += \", \" + str(vert_pt.X) + \" \" +  str(vert_pt.Y) + \" \" +  str(vert_pt.Z)       \r\n        face_wkt += \", \" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) + \"))\" # end point\r\n        \r\n        if(face != face_lst[-1]):\r\n            face_wkt += \", \"\r\n        face_wkt_lst += face_wkt        \r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\" \r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for cuboids with geometry = [centroid, length]\r\n    centroid = Solid.Centroid(geo_data)\r\n    offset = geo_data.Length/2\r\n    c_X = centroid.X\r\n    c_Y = centroid.Y\r\n    c_Z = centroid.Z\r\n\r\n    # idea: determine the coordinates of bottom- and top faces\r\n    \r\n    # p1 -- p2\r\n    # |  c   |\r\n    # p3 -- p4           \r\n    # bottom-face\r\n    bottom_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    bottom_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    bottom_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_face = \"((\" + bottom_p1 + \", \" + bottom_p2 + \", \" + bottom_p3 + \", \" + bottom_p4 +  \", \" + bottom_p1 + \"))\"\r\n    # top-face\r\n    top_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    top_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    top_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_face = \"((\" + top_p1 + \", \" + top_p2 + \", \" + top_p3 + \", \" + top_p4 +  \", \" + top_p1 + \"))\"\r\n    # front-face\r\n    front_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    front_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    front_p3 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    front_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    front_face = \"((\" + front_p1 + \", \" + front_p2 + \", \" + front_p3 + \", \" + front_p4 + \", \" + front_p1 + \"))\"\r\n    # back-face             \r\n    back_p1 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    back_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    back_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    back_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    back_face = \"((\" + back_p1 + \", \" + back_p2 + \", \" + back_p3 + \", \" + back_p4 + \", \" + back_p1 + \"))\"\r\n    # left-face\r\n    left_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p2 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p3 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_face = \"((\" + left_p1 + \", \" + left_p2 + \", \" + left_p3 + \", \" + left_p4 + \", \" + left_p1 + \"))\"            \r\n    # right-face\r\n    right_p1 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_p4 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_face = \"((\" + right_p1 + \", \" + right_p2 + \", \" + right_p3 + \", \" + right_p4 + \", \" + right_p1 + \"))\"\r\n    \r\n    cuboid_face = bottom_face + \", \" + top_face + \", \" + front_face + \", \" + back_face + \", \" + left_face + \", \" + right_face\r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    try:\r\n        wktLiteral += cuboid_face\r\n    except e:\r\n        return e\r\n    print(cuboid_face)\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:POLYGON>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    wktLiteral += \"POLYGON Z((\";\r\n    \r\n    points =  geo_data\r\n    originP = points[0];\r\n    \r\n    wktLiteral += str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z) # start point\r\n    for i in range(1, len(points)):\r\n        wktLiteral += \", \" + str(points[i].X) + \" \" +  str(points[i].Y) + \" \" +  str(points[i].Z);       \r\n    wktLiteral += \", \" + str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z); # end point\r\n    wktLiteral += \"))\"\r\n    \r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:POLYGON>\";\r\n    return wktLiteral\r\n\r\n#####\r\ndef wkt_Converter(geo_obj):\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n    geoSparqlNamespace = \"http://www.opengis.net/ont/geosparql#\"\r\n    exampleInstanceNamespace = \"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\"\r\n    \r\n    res = []\r\n    geo_data = geo_obj[0];\r\n    name = geo_obj[1];\r\n    geometryType = geo_obj[2];\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_ROTATION\"):\r\n        res.append(multipolygonInRotation2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_SPHERE\"):\r\n        res.append(sphere2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n        \r\n    if(geometryType.upper() == \"MULTIPOLYGON_MESH\"):\r\n        res.append(mesh2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n     \r\n    if(geometryType.upper() == \"MULTIPOLYGON\"):\r\n        res.append(multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON_ROTATION\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"LINESTRING\"):\r\n        res.append(lineString2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    return res\r\n\r\n############## RDF Wrapper ###############\r\ndef RDF_Wrapper(WKT_res):\r\n    rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\r\n    owl=\"http://www.w3.org/2002/07/owl#\";\r\n    ogc=\"http://www.opengis.net/\";\r\n    my=\"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\";\r\n    gml=\"http://www.opengis.net/ont/gml#\";\r\n    geo=\"http://www.opengis.net/ont/geosparql#\";\r\n    geof=\"http://www.opengis.net/def/function/geosparql/\";\r\n    rdfs=\"http://www.w3.org/2000/01/rdf-schema#\";\r\n    uom=\"http://www.opengis.net/def/uom/OGC/1.0/\";\r\n    sf=\"http://www.opengis.net/ont/sf#\";\r\n    xsd=\"http://www.w3.org/2001/XMLSchema#\";\r\n    geor=\"http://www.opengis.net/def/rule/geosparql/\";\r\n    namespaces = {\t\"rdf\" : rdf,\r\n                \t\"owl\" : owl,\r\n                \t\"ogc\" : ogc,\r\n                \t\"my\" : my,\r\n                \t\"gml\" : gml,\r\n                \t\"geo\" : geo,\r\n                \t\"geof\": geof,\r\n                \t\"rdfs\": rdfs,\r\n                \t\"uom\": uom,\r\n                \t\"sf\": sf,\r\n                \t\"xsd\": xsd,\r\n                \t\"geor\": geor\r\n            }\r\n    inserts = WKT_res\r\n    \r\n    # open RDF header\r\n    rdfStr = \"<rdf:RDF\";\r\n    \r\n    # handle Namespaces\r\n    for key in namespaces:\r\n        rdfStr += \" xmlns:\" + key + \"='\" + namespaces[key] + \"'\";\r\n    \r\n    rdfStr += \">\";\r\n    \r\n    #add inserts\r\n    \r\n    rdfStr += \"<rdf:Description rdf:about='my:\" + \"RootModel\" + \"'>\";\r\n    \r\n    for insert in inserts:\r\n        rdfStr += insert;\r\n    \r\n    rdfStr += \"</rdf:Description>\"\r\n    \r\n    # close RDF header\r\n    rdfStr += \"</rdf:RDF>\"\r\n    \r\n    # Weisen Sie Ihre Ausgabe der OUT-Variablen zu.\r\n    return rdfStr\r\n\r\n############## Ground Truth Generator ###############\r\ndef getGeometry(geo_obj):\r\n    return geo_obj[3]\r\n\r\ndef getGeoType(geo_obj):\r\n    return geo_obj[2]\r\n    \r\ndef getGeoName(geo_obj):\r\n    return geo_obj[1]\r\n    \r\ndef ground_truth_generator(geometry_lst):\r\n    geo_lst = geometry_lst\r\n    inter_geo_dict = {}\r\n    for i in range(0, len(geo_lst)-1):\r\n        geo_obj_1 = geo_lst[i]\r\n        geometry_1 = getGeometry(geo_obj_1)\r\n    \r\n        geo_obj_1_has_intersection = False\r\n        for j in range(1, len(geo_lst)):\r\n            geo_obj_2 = geo_lst[j]\r\n            geometry_2 = getGeometry(geo_obj_2)\r\n            \r\n            if getGeoName(geo_obj_1) != getGeoName(geo_obj_2):\r\n                temp_bool = False\r\n                try:\r\n                    temp_bool = Geometry.DoesIntersect(geometry_1, geometry_2)\r\n                except Exception as err:\r\n                    print(f\"Unexpected {err=}, {type(err)=}\")\r\n                if temp_bool:\r\n                    geo_obj_1_has_intersection = True\r\n                    inter_geo_dict[getGeoName(geo_obj_2)] = getGeoType(geo_obj_2)\r\n                    \r\n        if geo_obj_1_has_intersection:\r\n            inter_geo_dict[getGeoName(geo_obj_1)] = getGeoType(geo_obj_1)    \r\n    #================= Output ====================\r\n    if inter_geo_dict is None:\r\n        inter_geo_dict = {}\r\n    return inter_geo_dict\r\n    \r\n############## RDF 2 JSON ###############\r\ndef rdfParsing2GeoData(str):\r\n    \"\"\" it returns the json file in structure like { \"POLYGON1\" : [...], \r\n                                                     \"POLYGON2\" : [...], \r\n                                                     \"MULTIPOLYGON1\" : [...], ...\r\n                                                    }\r\n    \"\"\"\r\n    #dom = parse(path)\r\n    #tree = ET.ElementTree(ET.fromstring(str))\r\n    geo_dict = {}\r\n    tree = io.StringIO(str)\r\n    dom = parse(tree)\r\n    data = dom.documentElement\r\n    rdf_desc_lst = data.getElementsByTagName(\"rdf:Description\")\r\n    # geo_in_wkt = data.getElementsByTagName(\"geo:asWKT\")\r\n\r\n    for i in range(1, len(rdf_desc_lst)): # first description element (root element) should be removed.\r\n        descr_el = rdf_desc_lst[i]\r\n        geo_name_num = descr_el.attributes._attrs['rdf:about'].nodeValue.split('#')[1]\r\n        geo_wkt_data = \"\"\r\n        try:\r\n            geo_wkt_data = descr_el.childNodes[0].firstChild.data\r\n        except:\r\n            geo_wkt_data = descr_el.childNodes[1].firstChild.data\r\n        geo_algebra_lst = []\r\n\r\n        if ( geo_name_num.find('POINT') != -1 or\r\n            geo_name_num.find('Point') != -1 ):\r\n            \r\n            wkt_data_lst = geo_wkt_data.split(\"(\")[1] # remove title 'POINT'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n\r\n            pt_algebra_lst = []\r\n            pt_str_lst = vert_str_lst.split(\" \")\r\n\r\n            pt_algebra_lst = [ float(pt_str) for pt_str in pt_str_lst ]\r\n            geo_algebra_lst.append(pt_algebra_lst)\r\n            \r\n        if ( geo_name_num.find('LINESTRING') != -1 or\r\n            geo_name_num.find('Linestring') != -1 or\r\n            geo_name_num.find('LINE') != -1 or\r\n            geo_name_num.find('Line') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'LINESTRING'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            line_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)):\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                line_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(line_algebra_lst)\r\n\r\n        if ( geo_name_num.find('POLYGON') != -1 or \r\n            geo_name_num.find('Polygon') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'POLYGON Z'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            face_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                face_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(face_algebra_lst)\r\n\r\n        if ( geo_name_num.find('MULTIPOLYGON') != -1 or\r\n            geo_name_num.find('Multipolygon') != -1  or\r\n            geo_name_num.find('CUBE') != -1 or\r\n            geo_name_num.find('Cube') != -1 or\r\n            geo_name_num.find('SPHERE') != -1 or\r\n            geo_name_num.find('Sphere') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"(((\")[1] # remove title 'MULTIPOLYGON Z'\r\n            face_str_lst = wkt_data_lst.split(\"), \")\r\n\r\n            face_algebra_lst = []\r\n            for face_str in face_str_lst:\r\n                vert_str_lst = face_str.replace( \")\", \"\" ) # remove character ')'\r\n                vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n                vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n                pt_algebra_lst = []\r\n                for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                    pt_str_lst = vert_str_lst[i].split(\" \")\r\n                        \r\n                    pt_algebra = [ float(pt_str) for pt_str in pt_str_lst ]\r\n                    pt_algebra_lst.append(pt_algebra)\r\n\r\n                face_algebra_lst.append(pt_algebra_lst)\r\n            geo_algebra_lst = face_algebra_lst\r\n\r\n        if geo_name_num not in geo_dict.keys():\r\n            geo_dict[geo_name_num] = geo_algebra_lst\r\n    return geo_dict\r\n    \r\n######################################################\r\n############## RDF File Configuration ###############\r\nrdf_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\rdf\\\\case_study\\\\\"\r\nrdf_file_contents = \"\"\r\n\r\n############## JSON File Configuration ###############\r\njson_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\case_study\\\\\"\r\njson_ground_truth_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\ground_truth\\\\\"\r\njson_file_contents = {\"test\":\"\"}\r\n\r\n########## JSON Export #############\r\ndef JSON_export(json_file_path, json_file_name, json_file_contents):\r\n    \r\n    tmp_json_file_path = json_file_path + json_file_name\r\n    try:\r\n        with open(tmp_json_file_path, \"w\") as f:\r\n            json.dump(json_file_contents, f, sort_keys=True, indent=4)\r\n            #f.write(json_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{json_file_path}' already exists.\")\r\n\r\n########## RDF Export #############\r\ndef rdf_export(rdf_file_path, rdf_file_name, rdf_file_contents):\r\n\r\n    tmp_rdf_file_path = rdf_file_path + rdf_file_name\r\n    try:\r\n        with open(tmp_rdf_file_path, \"w\") as f:\r\n            f.write(rdf_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{rdf_file_path}' already exists.\")\r\n        \r\n        \r\n############## Contents (RDF, JSON) Generation ###############\r\n# convert RDF file to JSON file and store it locally\r\nrdf_2_json_contents = rdfParsing2GeoData(IN[0])\r\n#====================================\r\nOUT = rdf_2_json_contents",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "c491f0eea7c8489ebd7653248ff16c8a",
      "Inputs": [
        {
          "Id": "26bb73db672d4039995ed896f624a850",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ce72f689eb9a40a58fdc4bdd81399d1d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport json\r\nimport os\r\nimport random\r\nimport pickle\r\nimport io\r\nimport ctypes\r\nimport math\r\nimport xml.etree.ElementTree as ET\r\nsys.path.append(r\"C:\\Users\\yhe\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\")\r\nfrom xml.dom.minidom import parse, parseString\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\ndef Mesh_to_WKT(solid, solid_name):\r\n    #sphere_mesh = Mesh.ByGeometry(solid)\r\n    #mesh_lst = Mesh.Explode(sphere_mesh)\r\n    mesh_lst=solid\r\n    mesh_vert_lst = []\r\n    \r\n    for mesh in mesh_lst:\r\n        mesh_vert_lst.append(Mesh.Vertices(mesh))\r\n        \r\n    geo_data = mesh_vert_lst\r\n    geo_name = \"MULTIPOLYGON\" + \"-\" + str(solid_name)\r\n    geo_type = \"MULTIPOLYGON_MESH\"\r\n    geometry = solid\r\n    geo_obj_solid = (geo_data, geo_name, geo_type, geometry)\r\n\r\n    return geo_obj_solid\r\n\r\n#################### WKT Converter #############################\r\ndef sphere2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n\r\ndef mesh2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n    \r\ndef multipolygonInRotation2WKT(face_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    face_wkt_lst = \"\"\r\n    \r\n    for face in face_lst:\r\n        \r\n        vertice_lst = face.Vertices\r\n        org_vert_pt = vertice_lst[0].PointGeometry \r\n        face_wkt = \"((\" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) # start point\r\n    \r\n        for i in range(1, len(vertice_lst)):\r\n            vert_pt = vertice_lst[i].PointGeometry\r\n            face_wkt += \", \" + str(vert_pt.X) + \" \" +  str(vert_pt.Y) + \" \" +  str(vert_pt.Z)       \r\n        face_wkt += \", \" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) + \"))\" # end point\r\n        \r\n        if(face != face_lst[-1]):\r\n            face_wkt += \", \"\r\n        face_wkt_lst += face_wkt        \r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\" \r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for cuboids with geometry = [centroid, length]\r\n    centroid = Solid.Centroid(geo_data)\r\n    offset = geo_data.Length/2\r\n    c_X = centroid.X\r\n    c_Y = centroid.Y\r\n    c_Z = centroid.Z\r\n\r\n    # idea: determine the coordinates of bottom- and top faces\r\n    \r\n    # p1 -- p2\r\n    # |  c   |\r\n    # p3 -- p4           \r\n    # bottom-face\r\n    bottom_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    bottom_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    bottom_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_face = \"((\" + bottom_p1 + \", \" + bottom_p2 + \", \" + bottom_p3 + \", \" + bottom_p4 +  \", \" + bottom_p1 + \"))\"\r\n    # top-face\r\n    top_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    top_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    top_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_face = \"((\" + top_p1 + \", \" + top_p2 + \", \" + top_p3 + \", \" + top_p4 +  \", \" + top_p1 + \"))\"\r\n    # front-face\r\n    front_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    front_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    front_p3 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    front_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    front_face = \"((\" + front_p1 + \", \" + front_p2 + \", \" + front_p3 + \", \" + front_p4 + \", \" + front_p1 + \"))\"\r\n    # back-face             \r\n    back_p1 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    back_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    back_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    back_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    back_face = \"((\" + back_p1 + \", \" + back_p2 + \", \" + back_p3 + \", \" + back_p4 + \", \" + back_p1 + \"))\"\r\n    # left-face\r\n    left_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p2 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p3 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_face = \"((\" + left_p1 + \", \" + left_p2 + \", \" + left_p3 + \", \" + left_p4 + \", \" + left_p1 + \"))\"            \r\n    # right-face\r\n    right_p1 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_p4 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_face = \"((\" + right_p1 + \", \" + right_p2 + \", \" + right_p3 + \", \" + right_p4 + \", \" + right_p1 + \"))\"\r\n    \r\n    cuboid_face = bottom_face + \", \" + top_face + \", \" + front_face + \", \" + back_face + \", \" + left_face + \", \" + right_face\r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    try:\r\n        wktLiteral += cuboid_face\r\n    except e:\r\n        return e\r\n    print(cuboid_face)\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:POLYGON>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    wktLiteral += \"POLYGON Z((\";\r\n    \r\n    points =  geo_data\r\n    originP = points[0];\r\n    \r\n    wktLiteral += str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z) # start point\r\n    for i in range(1, len(points)):\r\n        wktLiteral += \", \" + str(points[i].X) + \" \" +  str(points[i].Y) + \" \" +  str(points[i].Z);       \r\n    wktLiteral += \", \" + str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z); # end point\r\n    wktLiteral += \"))\"\r\n    \r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:POLYGON>\";\r\n    return wktLiteral\r\n\r\n#####\r\ndef wkt_Converter(geo_obj):\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n    geoSparqlNamespace = \"http://www.opengis.net/ont/geosparql#\"\r\n    exampleInstanceNamespace = \"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\"\r\n    \r\n    res = []\r\n    geo_data = geo_obj[0];\r\n    name = geo_obj[1];\r\n    geometryType = geo_obj[2];\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_ROTATION\"):\r\n        res.append(multipolygonInRotation2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_SPHERE\"):\r\n        res.append(sphere2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n        \r\n    if(geometryType.upper() == \"MULTIPOLYGON_MESH\"):\r\n        res.append(mesh2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n     \r\n    if(geometryType.upper() == \"MULTIPOLYGON\"):\r\n        res.append(multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON_ROTATION\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"LINESTRING\"):\r\n        res.append(lineString2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    return res\r\n\r\n############## RDF Wrapper ###############\r\ndef RDF_Wrapper(WKT_res):\r\n    rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\r\n    owl=\"http://www.w3.org/2002/07/owl#\";\r\n    ogc=\"http://www.opengis.net/\";\r\n    my=\"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\";\r\n    gml=\"http://www.opengis.net/ont/gml#\";\r\n    geo=\"http://www.opengis.net/ont/geosparql#\";\r\n    geof=\"http://www.opengis.net/def/function/geosparql/\";\r\n    rdfs=\"http://www.w3.org/2000/01/rdf-schema#\";\r\n    uom=\"http://www.opengis.net/def/uom/OGC/1.0/\";\r\n    sf=\"http://www.opengis.net/ont/sf#\";\r\n    xsd=\"http://www.w3.org/2001/XMLSchema#\";\r\n    geor=\"http://www.opengis.net/def/rule/geosparql/\";\r\n    namespaces = {\t\"rdf\" : rdf,\r\n                \t\"owl\" : owl,\r\n                \t\"ogc\" : ogc,\r\n                \t\"my\" : my,\r\n                \t\"gml\" : gml,\r\n                \t\"geo\" : geo,\r\n                \t\"geof\": geof,\r\n                \t\"rdfs\": rdfs,\r\n                \t\"uom\": uom,\r\n                \t\"sf\": sf,\r\n                \t\"xsd\": xsd,\r\n                \t\"geor\": geor\r\n            }\r\n    inserts = WKT_res\r\n    \r\n    # open RDF header\r\n    rdfStr = \"<rdf:RDF\";\r\n    \r\n    # handle Namespaces\r\n    for key in namespaces:\r\n        rdfStr += \" xmlns:\" + key + \"='\" + namespaces[key] + \"'\";\r\n    \r\n    rdfStr += \">\";\r\n    \r\n    #add inserts\r\n    \r\n    rdfStr += \"<rdf:Description rdf:about='my:\" + \"RootModel\" + \"'>\";\r\n    \r\n    for insert in inserts:\r\n        rdfStr += insert;\r\n    \r\n    rdfStr += \"</rdf:Description>\"\r\n    \r\n    # close RDF header\r\n    rdfStr += \"</rdf:RDF>\"\r\n    \r\n    # Weisen Sie Ihre Ausgabe der OUT-Variablen zu.\r\n    return rdfStr\r\n\r\n############## Ground Truth Generator ###############\r\ndef getGeometry(geo_obj):\r\n    return geo_obj[3]\r\n\r\ndef getGeoType(geo_obj):\r\n    return geo_obj[2]\r\n    \r\ndef getGeoName(geo_obj):\r\n    return geo_obj[1]\r\n    \r\ndef ground_truth_generator(geometry_lst):\r\n    geo_lst = geometry_lst\r\n    inter_geo_dict = {}\r\n    for i in range(0, len(geo_lst)-1):\r\n        geo_obj_1 = geo_lst[i]\r\n        geometry_1 = getGeometry(geo_obj_1)\r\n    \r\n        geo_obj_1_has_intersection = False\r\n        for j in range(1, len(geo_lst)):\r\n            geo_obj_2 = geo_lst[j]\r\n            geometry_2 = getGeometry(geo_obj_2)\r\n            \r\n            if getGeoName(geo_obj_1) != getGeoName(geo_obj_2):\r\n                temp_bool = False\r\n                try:\r\n                    temp_bool = Geometry.DoesIntersect(geometry_1, geometry_2)\r\n                except Exception as err:\r\n                    print(f\"Unexpected {err=}, {type(err)=}\")\r\n                if temp_bool:\r\n                    geo_obj_1_has_intersection = True\r\n                    inter_geo_dict[getGeoName(geo_obj_2)] = getGeoType(geo_obj_2)\r\n                    \r\n        if geo_obj_1_has_intersection:\r\n            inter_geo_dict[getGeoName(geo_obj_1)] = getGeoType(geo_obj_1)    \r\n    #================= Output ====================\r\n    if inter_geo_dict is None:\r\n        inter_geo_dict = {}\r\n    return inter_geo_dict\r\n    \r\n############## RDF 2 JSON ###############\r\ndef rdfParsing2GeoData(str):\r\n    \"\"\" it returns the json file in structure like { \"POLYGON1\" : [...], \r\n                                                     \"POLYGON2\" : [...], \r\n                                                     \"MULTIPOLYGON1\" : [...], ...\r\n                                                    }\r\n    \"\"\"\r\n    #dom = parse(path)\r\n    #tree = ET.ElementTree(ET.fromstring(str))\r\n    geo_dict = {}\r\n    tree = io.StringIO(str)\r\n    dom = parse(tree)\r\n    data = dom.documentElement\r\n    rdf_desc_lst = data.getElementsByTagName(\"rdf:Description\")\r\n    # geo_in_wkt = data.getElementsByTagName(\"geo:asWKT\")\r\n\r\n    for i in range(1, len(rdf_desc_lst)): # first description element (root element) should be removed.\r\n        descr_el = rdf_desc_lst[i]\r\n        geo_name_num = descr_el.attributes._attrs['rdf:about'].nodeValue.split('#')[1]\r\n        geo_wkt_data = \"\"\r\n        try:\r\n            geo_wkt_data = descr_el.childNodes[0].firstChild.data\r\n        except:\r\n            geo_wkt_data = descr_el.childNodes[1].firstChild.data\r\n        geo_algebra_lst = []\r\n\r\n        if ( geo_name_num.find('POINT') != -1 or\r\n            geo_name_num.find('Point') != -1 ):\r\n            \r\n            wkt_data_lst = geo_wkt_data.split(\"(\")[1] # remove title 'POINT'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n\r\n            pt_algebra_lst = []\r\n            pt_str_lst = vert_str_lst.split(\" \")\r\n\r\n            pt_algebra_lst = [ float(pt_str) for pt_str in pt_str_lst ]\r\n            geo_algebra_lst.append(pt_algebra_lst)\r\n            \r\n        if ( geo_name_num.find('LINESTRING') != -1 or\r\n            geo_name_num.find('Linestring') != -1 or\r\n            geo_name_num.find('LINE') != -1 or\r\n            geo_name_num.find('Line') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'LINESTRING'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            line_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)):\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                line_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(line_algebra_lst)\r\n\r\n        if ( geo_name_num.find('POLYGON') != -1 or \r\n            geo_name_num.find('Polygon') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'POLYGON Z'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            face_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                face_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(face_algebra_lst)\r\n\r\n        if ( geo_name_num.find('MULTIPOLYGON') != -1 or\r\n            geo_name_num.find('Multipolygon') != -1  or\r\n            geo_name_num.find('CUBE') != -1 or\r\n            geo_name_num.find('Cube') != -1 or\r\n            geo_name_num.find('SPHERE') != -1 or\r\n            geo_name_num.find('Sphere') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"(((\")[1] # remove title 'MULTIPOLYGON Z'\r\n            face_str_lst = wkt_data_lst.split(\"), \")\r\n\r\n            face_algebra_lst = []\r\n            for face_str in face_str_lst:\r\n                vert_str_lst = face_str.replace( \")\", \"\" ) # remove character ')'\r\n                vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n                vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n                pt_algebra_lst = []\r\n                for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                    pt_str_lst = vert_str_lst[i].split(\" \")\r\n                        \r\n                    pt_algebra = [ float(pt_str) for pt_str in pt_str_lst ]\r\n                    pt_algebra_lst.append(pt_algebra)\r\n\r\n                face_algebra_lst.append(pt_algebra_lst)\r\n            geo_algebra_lst = face_algebra_lst\r\n\r\n        if geo_name_num not in geo_dict.keys():\r\n            geo_dict[geo_name_num] = geo_algebra_lst\r\n    return geo_dict\r\n    \r\n######################################################\r\n############## RDF File Configuration ###############\r\nrdf_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\rdf\\\\case_study\\\\\"\r\nrdf_file_contents = \"\"\r\n\r\n############## JSON File Configuration ###############\r\njson_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\case_study\\\\\"\r\njson_ground_truth_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\ground_truth\\\\\"\r\njson_file_contents = {\"test\":\"\"}\r\n\r\n########## JSON Export #############\r\ndef JSON_export(json_file_path, json_file_name, json_file_contents):\r\n    \r\n    tmp_json_file_path = json_file_path + json_file_name\r\n    try:\r\n        with open(tmp_json_file_path, \"w\") as f:\r\n            json.dump(json_file_contents, f, sort_keys=True, indent=4)\r\n            #f.write(json_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{json_file_path}' already exists.\")\r\n\r\n########## RDF Export #############\r\ndef rdf_export(rdf_file_path, rdf_file_name, rdf_file_contents):\r\n\r\n    tmp_rdf_file_path = rdf_file_path + rdf_file_name\r\n    try:\r\n        with open(tmp_rdf_file_path, \"w\") as f:\r\n            f.write(rdf_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{rdf_file_path}' already exists.\")\r\n        \r\n        \r\n############## Contents (RDF, JSON) Generation ###############\r\nJSON_export(json_case_study_file_path, \"2nd_CaseStudy_CubeSolid.json\", IN[0])\r\n#====================================\r\nOUT = 0",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "4c6eee1edd89412fac5d402cc52ba6a6",
      "Inputs": [
        {
          "Id": "8130a4d8da194db28dd198519ae9a4eb",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8f14bfb4ab3f4e19ad121c95f43d0e15",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "44add20207a74d7ea2438bf42051d096",
      "Inputs": [
        {
          "Id": "0cd2eb456f3140f69ef8944ef0916626",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "118c63e7c7bf4694b931baa92688d63c",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTIPOLYGON-Dice\";",
      "Id": "76f043f238eb42debdfb61b72db4ab27",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7aa24e9e29414ebd9702f5f503f0d6b5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.Dynamo.MeshToolkit.Mesh.ByGeometry@Autodesk.DesignScript.Geometry.Geometry,double,int",
      "Id": "07dcd20fb2b048dabf2af509e50bf4b1",
      "Inputs": [
        {
          "Id": "4dad47c339b243739a595c5344627235",
          "Name": "inputGeometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fd378bd3f85b4caf8f84bab8d93d072e",
          "Name": "tolerance",
          "Description": "double\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "483b4a09b96d47d7bc0613b17923d350",
          "Name": "maxGridLines",
          "Description": "int\nDefault value : 512",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "12433df6fa764b688e3f551ae1f1a52c",
          "Name": "Mesh",
          "Description": "Mesh",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Convert a Geometry object such as a Solid or Surface into a Mesh. The resolution of the mesh is determined by the Dynamo render precision\n\nMesh.ByGeometry (inputGeometry: Geometry, tolerance: double = -1, maxGridLines: int = 512): Mesh"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.Dynamo.MeshToolkit.Mesh.Explode",
      "Id": "5d6082e1fb484054b80b2c895c17d93b",
      "Inputs": [
        {
          "Id": "136fe039706441b790989cc0671740f5",
          "Name": "mesh",
          "Description": "Autodesk.Dynamo.MeshToolkit.Mesh",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d4629fb91e4b4272955cc98725e12fd7",
          "Name": "Mesh[]",
          "Description": "Mesh[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts Mesh triangles to individual meshes and returns them.\n\nMesh.Explode ( ): Mesh[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport random\r\nimport pickle\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\n# random sphere(s)\r\nmesh_vert_lst = []\r\nfor mesh in IN[0]:\r\n    mesh_vert_lst.append(Mesh.Vertices(mesh))\r\n\r\nOUT=mesh_vert_lst",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "e476158f80ee47d9bf5d88bccf93d0b0",
      "Inputs": [
        {
          "Id": "104a95c42715494f9517fb2c6e40c919",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "69721e97dffe4d22bc17748321c65855",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "4b98d66c720845a690b1fadab323fa4d",
      "Inputs": [
        {
          "Id": "4d730d718e4a479f913ba592a9d0e50a",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9679b23118af4f88a84827d79e2c46be",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport json\r\nimport os\r\nimport random\r\nimport pickle\r\nimport io\r\nimport ctypes\r\nimport math\r\nimport xml.etree.ElementTree as ET\r\nsys.path.append(r\"C:\\Users\\yhe\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\")\r\nfrom xml.dom.minidom import parse, parseString\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\n# Place your code below this line\r\ndef mesh2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n# Assign your output to the OUT variable.\r\ngeoSparqlNamespace = \"http://www.opengis.net/ont/geosparql#\"\r\nexampleInstanceNamespace = \"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\"\r\nOUT = mesh2WKT(IN[0],  exampleInstanceNamespace, geoSparqlNamespace, IN[1])",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "4345991546a7419eb587d1ba5730bd8a",
      "Inputs": [
        {
          "Id": "a2e93a829ea349bd86da11a47250c27b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "935cc72043f54d8cb6aa0d944edc2c32",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "690fc57abec443a1ac34e7ab83128097",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "8cc59ed11d884fd4ac6d30bc3f745efa",
      "Inputs": [
        {
          "Id": "a8faee87dbac499d9adc09bfe588f9d0",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0127cc3ba60b4597b2446c5a85c39bf1",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport json\r\nimport os\r\nimport random\r\nimport pickle\r\nimport io\r\nimport ctypes\r\nimport math\r\nimport xml.etree.ElementTree as ET\r\nsys.path.append(r\"C:\\Users\\yhe\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\")\r\nfrom xml.dom.minidom import parse, parseString\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\ndef Mesh_to_WKT(solid, solid_name):\r\n    #sphere_mesh = Mesh.ByGeometry(solid)\r\n    #mesh_lst = Mesh.Explode(sphere_mesh)\r\n    mesh_lst=solid\r\n    mesh_vert_lst = []\r\n    \r\n    for mesh in mesh_lst:\r\n        mesh_vert_lst.append(Mesh.Vertices(mesh))\r\n        \r\n    geo_data = mesh_vert_lst\r\n    geo_name = \"MULTIPOLYGON\" + \"-\" + str(solid_name)\r\n    geo_type = \"MULTIPOLYGON_MESH\"\r\n    geometry = solid\r\n    geo_obj_solid = (geo_data, geo_name, geo_type, geometry)\r\n\r\n    return geo_obj_solid\r\n\r\n#################### WKT Converter #############################\r\ndef sphere2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n\r\ndef mesh2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n    \r\ndef multipolygonInRotation2WKT(face_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    face_wkt_lst = \"\"\r\n    \r\n    for face in face_lst:\r\n        \r\n        vertice_lst = face.Vertices\r\n        org_vert_pt = vertice_lst[0].PointGeometry \r\n        face_wkt = \"((\" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) # start point\r\n    \r\n        for i in range(1, len(vertice_lst)):\r\n            vert_pt = vertice_lst[i].PointGeometry\r\n            face_wkt += \", \" + str(vert_pt.X) + \" \" +  str(vert_pt.Y) + \" \" +  str(vert_pt.Z)       \r\n        face_wkt += \", \" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) + \"))\" # end point\r\n        \r\n        if(face != face_lst[-1]):\r\n            face_wkt += \", \"\r\n        face_wkt_lst += face_wkt        \r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\" \r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for cuboids with geometry = [centroid, length]\r\n    centroid = Solid.Centroid(geo_data)\r\n    offset = geo_data.Length/2\r\n    c_X = centroid.X\r\n    c_Y = centroid.Y\r\n    c_Z = centroid.Z\r\n\r\n    # idea: determine the coordinates of bottom- and top faces\r\n    \r\n    # p1 -- p2\r\n    # |  c   |\r\n    # p3 -- p4           \r\n    # bottom-face\r\n    bottom_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    bottom_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    bottom_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_face = \"((\" + bottom_p1 + \", \" + bottom_p2 + \", \" + bottom_p3 + \", \" + bottom_p4 +  \", \" + bottom_p1 + \"))\"\r\n    # top-face\r\n    top_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    top_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    top_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_face = \"((\" + top_p1 + \", \" + top_p2 + \", \" + top_p3 + \", \" + top_p4 +  \", \" + top_p1 + \"))\"\r\n    # front-face\r\n    front_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    front_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    front_p3 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    front_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    front_face = \"((\" + front_p1 + \", \" + front_p2 + \", \" + front_p3 + \", \" + front_p4 + \", \" + front_p1 + \"))\"\r\n    # back-face             \r\n    back_p1 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    back_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    back_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    back_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    back_face = \"((\" + back_p1 + \", \" + back_p2 + \", \" + back_p3 + \", \" + back_p4 + \", \" + back_p1 + \"))\"\r\n    # left-face\r\n    left_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p2 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p3 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_face = \"((\" + left_p1 + \", \" + left_p2 + \", \" + left_p3 + \", \" + left_p4 + \", \" + left_p1 + \"))\"            \r\n    # right-face\r\n    right_p1 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_p4 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_face = \"((\" + right_p1 + \", \" + right_p2 + \", \" + right_p3 + \", \" + right_p4 + \", \" + right_p1 + \"))\"\r\n    \r\n    cuboid_face = bottom_face + \", \" + top_face + \", \" + front_face + \", \" + back_face + \", \" + left_face + \", \" + right_face\r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    try:\r\n        wktLiteral += cuboid_face\r\n    except e:\r\n        return e\r\n    print(cuboid_face)\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:POLYGON>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    wktLiteral += \"POLYGON Z((\";\r\n    \r\n    points =  geo_data\r\n    originP = points[0];\r\n    \r\n    wktLiteral += str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z) # start point\r\n    for i in range(1, len(points)):\r\n        wktLiteral += \", \" + str(points[i].X) + \" \" +  str(points[i].Y) + \" \" +  str(points[i].Z);       \r\n    wktLiteral += \", \" + str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z); # end point\r\n    wktLiteral += \"))\"\r\n    \r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:POLYGON>\";\r\n    return wktLiteral\r\n\r\n#####\r\ndef wkt_Converter(geo_obj):\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n    geoSparqlNamespace = \"http://www.opengis.net/ont/geosparql#\"\r\n    exampleInstanceNamespace = \"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\"\r\n    \r\n    res = []\r\n    geo_data = geo_obj[0];\r\n    name = geo_obj[1];\r\n    geometryType = geo_obj[2];\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_ROTATION\"):\r\n        res.append(multipolygonInRotation2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_SPHERE\"):\r\n        res.append(sphere2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n        \r\n    if(geometryType.upper() == \"MULTIPOLYGON_MESH\"):\r\n        res.append(mesh2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n     \r\n    if(geometryType.upper() == \"MULTIPOLYGON\"):\r\n        res.append(multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON_ROTATION\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"LINESTRING\"):\r\n        res.append(lineString2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    return res\r\n\r\n############## RDF Wrapper ###############\r\ndef RDF_Wrapper(WKT_res):\r\n    rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\r\n    owl=\"http://www.w3.org/2002/07/owl#\";\r\n    ogc=\"http://www.opengis.net/\";\r\n    my=\"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\";\r\n    gml=\"http://www.opengis.net/ont/gml#\";\r\n    geo=\"http://www.opengis.net/ont/geosparql#\";\r\n    geof=\"http://www.opengis.net/def/function/geosparql/\";\r\n    rdfs=\"http://www.w3.org/2000/01/rdf-schema#\";\r\n    uom=\"http://www.opengis.net/def/uom/OGC/1.0/\";\r\n    sf=\"http://www.opengis.net/ont/sf#\";\r\n    xsd=\"http://www.w3.org/2001/XMLSchema#\";\r\n    geor=\"http://www.opengis.net/def/rule/geosparql/\";\r\n    namespaces = {\t\"rdf\" : rdf,\r\n                \t\"owl\" : owl,\r\n                \t\"ogc\" : ogc,\r\n                \t\"my\" : my,\r\n                \t\"gml\" : gml,\r\n                \t\"geo\" : geo,\r\n                \t\"geof\": geof,\r\n                \t\"rdfs\": rdfs,\r\n                \t\"uom\": uom,\r\n                \t\"sf\": sf,\r\n                \t\"xsd\": xsd,\r\n                \t\"geor\": geor\r\n            }\r\n    inserts = WKT_res\r\n    \r\n    # open RDF header\r\n    rdfStr = \"<rdf:RDF\";\r\n    \r\n    # handle Namespaces\r\n    for key in namespaces:\r\n        rdfStr += \" xmlns:\" + key + \"='\" + namespaces[key] + \"'\";\r\n    \r\n    rdfStr += \">\";\r\n    \r\n    #add inserts\r\n    \r\n    rdfStr += \"<rdf:Description rdf:about='my:\" + \"RootModel\" + \"'>\";\r\n    \r\n    for insert in inserts:\r\n        rdfStr += insert;\r\n    \r\n    rdfStr += \"</rdf:Description>\"\r\n    \r\n    # close RDF header\r\n    rdfStr += \"</rdf:RDF>\"\r\n    \r\n    # Weisen Sie Ihre Ausgabe der OUT-Variablen zu.\r\n    return rdfStr\r\n\r\n############## Ground Truth Generator ###############\r\ndef getGeometry(geo_obj):\r\n    return geo_obj[3]\r\n\r\ndef getGeoType(geo_obj):\r\n    return geo_obj[2]\r\n    \r\ndef getGeoName(geo_obj):\r\n    return geo_obj[1]\r\n    \r\ndef ground_truth_generator(geometry_lst):\r\n    geo_lst = geometry_lst\r\n    inter_geo_dict = {}\r\n    for i in range(0, len(geo_lst)-1):\r\n        geo_obj_1 = geo_lst[i]\r\n        geometry_1 = getGeometry(geo_obj_1)\r\n    \r\n        geo_obj_1_has_intersection = False\r\n        for j in range(1, len(geo_lst)):\r\n            geo_obj_2 = geo_lst[j]\r\n            geometry_2 = getGeometry(geo_obj_2)\r\n            \r\n            if getGeoName(geo_obj_1) != getGeoName(geo_obj_2):\r\n                temp_bool = False\r\n                try:\r\n                    temp_bool = Geometry.DoesIntersect(geometry_1, geometry_2)\r\n                except Exception as err:\r\n                    print(f\"Unexpected {err=}, {type(err)=}\")\r\n                if temp_bool:\r\n                    geo_obj_1_has_intersection = True\r\n                    inter_geo_dict[getGeoName(geo_obj_2)] = getGeoType(geo_obj_2)\r\n                    \r\n        if geo_obj_1_has_intersection:\r\n            inter_geo_dict[getGeoName(geo_obj_1)] = getGeoType(geo_obj_1)    \r\n    #================= Output ====================\r\n    if inter_geo_dict is None:\r\n        inter_geo_dict = {}\r\n    return inter_geo_dict\r\n    \r\n############## RDF 2 JSON ###############\r\ndef rdfParsing2GeoData(str):\r\n    \"\"\" it returns the json file in structure like { \"POLYGON1\" : [...], \r\n                                                     \"POLYGON2\" : [...], \r\n                                                     \"MULTIPOLYGON1\" : [...], ...\r\n                                                    }\r\n    \"\"\"\r\n    #dom = parse(path)\r\n    #tree = ET.ElementTree(ET.fromstring(str))\r\n    geo_dict = {}\r\n    tree = io.StringIO(str)\r\n    dom = parse(tree)\r\n    data = dom.documentElement\r\n    rdf_desc_lst = data.getElementsByTagName(\"rdf:Description\")\r\n    # geo_in_wkt = data.getElementsByTagName(\"geo:asWKT\")\r\n\r\n    for i in range(1, len(rdf_desc_lst)): # first description element (root element) should be removed.\r\n        descr_el = rdf_desc_lst[i]\r\n        geo_name_num = descr_el.attributes._attrs['rdf:about'].nodeValue.split('#')[1]\r\n        geo_wkt_data = \"\"\r\n        try:\r\n            geo_wkt_data = descr_el.childNodes[0].firstChild.data\r\n        except:\r\n            geo_wkt_data = descr_el.childNodes[1].firstChild.data\r\n        geo_algebra_lst = []\r\n\r\n        if ( geo_name_num.find('POINT') != -1 or\r\n            geo_name_num.find('Point') != -1 ):\r\n            \r\n            wkt_data_lst = geo_wkt_data.split(\"(\")[1] # remove title 'POINT'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n\r\n            pt_algebra_lst = []\r\n            pt_str_lst = vert_str_lst.split(\" \")\r\n\r\n            pt_algebra_lst = [ float(pt_str) for pt_str in pt_str_lst ]\r\n            geo_algebra_lst.append(pt_algebra_lst)\r\n            \r\n        if ( geo_name_num.find('LINESTRING') != -1 or\r\n            geo_name_num.find('Linestring') != -1 or\r\n            geo_name_num.find('LINE') != -1 or\r\n            geo_name_num.find('Line') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'LINESTRING'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            line_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)):\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                line_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(line_algebra_lst)\r\n\r\n        if ( geo_name_num.find('POLYGON') != -1 or \r\n            geo_name_num.find('Polygon') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'POLYGON Z'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            face_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                face_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(face_algebra_lst)\r\n\r\n        if ( geo_name_num.find('MULTIPOLYGON') != -1 or\r\n            geo_name_num.find('Multipolygon') != -1  or\r\n            geo_name_num.find('CUBE') != -1 or\r\n            geo_name_num.find('Cube') != -1 or\r\n            geo_name_num.find('SPHERE') != -1 or\r\n            geo_name_num.find('Sphere') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"(((\")[1] # remove title 'MULTIPOLYGON Z'\r\n            face_str_lst = wkt_data_lst.split(\"), \")\r\n\r\n            face_algebra_lst = []\r\n            for face_str in face_str_lst:\r\n                vert_str_lst = face_str.replace( \")\", \"\" ) # remove character ')'\r\n                vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n                vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n                pt_algebra_lst = []\r\n                for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                    pt_str_lst = vert_str_lst[i].split(\" \")\r\n                        \r\n                    pt_algebra = [ float(pt_str) for pt_str in pt_str_lst ]\r\n                    pt_algebra_lst.append(pt_algebra)\r\n\r\n                face_algebra_lst.append(pt_algebra_lst)\r\n            geo_algebra_lst = face_algebra_lst\r\n\r\n        if geo_name_num not in geo_dict.keys():\r\n            geo_dict[geo_name_num] = geo_algebra_lst\r\n    return geo_dict\r\n    \r\n######################################################\r\n############## RDF File Configuration ###############\r\nrdf_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\rdf\\\\case_study\\\\\"\r\nrdf_file_contents = \"\"\r\n\r\n############## JSON File Configuration ###############\r\njson_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\case_study\\\\\"\r\njson_ground_truth_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\ground_truth\\\\\"\r\njson_file_contents = {\"test\":\"\"}\r\n\r\n########## JSON Export #############\r\ndef JSON_export(json_file_path, json_file_name, json_file_contents):\r\n    \r\n    tmp_json_file_path = json_file_path + json_file_name\r\n    try:\r\n        with open(tmp_json_file_path, \"w\") as f:\r\n            json.dump(json_file_contents, f, sort_keys=True, indent=4)\r\n            #f.write(json_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{json_file_path}' already exists.\")\r\n\r\n########## RDF Export #############\r\ndef rdf_export(rdf_file_path, rdf_file_name, rdf_file_contents):\r\n\r\n    tmp_rdf_file_path = rdf_file_path + rdf_file_name\r\n    try:\r\n        with open(tmp_rdf_file_path, \"w\") as f:\r\n            f.write(rdf_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{rdf_file_path}' already exists.\")\r\n        \r\n        \r\n############## Contents (RDF, JSON) Generation ###############\r\n# create geometries randomly\r\n# convert geos to WKT\r\n# wrapp WKT with RDF labels\r\nrdf_contents = RDF_Wrapper(IN[0])\r\nrdf_export(rdf_case_study_file_path, \"2nd_CaseStudy_TubeSolid.rdf\", rdf_contents)\r\n#====================================\r\nOUT = rdf_contents",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "0baa6a0f97ae47c38a4e2d7aa7d9283c",
      "Inputs": [
        {
          "Id": "b1460cadc40344cab574feb3861e5820",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0c874552fb6f4f81851c3f60a939d98b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e2371dae1dcb4644a642e876a12a1855",
      "Inputs": [
        {
          "Id": "7550341f07054f2a97e90098854f3432",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cec4e462ec5147fb858383bf1f97a7de",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport json\r\nimport os\r\nimport random\r\nimport pickle\r\nimport io\r\nimport ctypes\r\nimport math\r\nimport xml.etree.ElementTree as ET\r\nsys.path.append(r\"C:\\Users\\yhe\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\")\r\nfrom xml.dom.minidom import parse, parseString\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\ndef Mesh_to_WKT(solid, solid_name):\r\n    #sphere_mesh = Mesh.ByGeometry(solid)\r\n    #mesh_lst = Mesh.Explode(sphere_mesh)\r\n    mesh_lst=solid\r\n    mesh_vert_lst = []\r\n    \r\n    for mesh in mesh_lst:\r\n        mesh_vert_lst.append(Mesh.Vertices(mesh))\r\n        \r\n    geo_data = mesh_vert_lst\r\n    geo_name = \"MULTIPOLYGON\" + \"-\" + str(solid_name)\r\n    geo_type = \"MULTIPOLYGON_MESH\"\r\n    geometry = solid\r\n    geo_obj_solid = (geo_data, geo_name, geo_type, geometry)\r\n\r\n    return geo_obj_solid\r\n\r\n#################### WKT Converter #############################\r\ndef sphere2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n\r\ndef mesh2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n    \r\ndef multipolygonInRotation2WKT(face_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    face_wkt_lst = \"\"\r\n    \r\n    for face in face_lst:\r\n        \r\n        vertice_lst = face.Vertices\r\n        org_vert_pt = vertice_lst[0].PointGeometry \r\n        face_wkt = \"((\" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) # start point\r\n    \r\n        for i in range(1, len(vertice_lst)):\r\n            vert_pt = vertice_lst[i].PointGeometry\r\n            face_wkt += \", \" + str(vert_pt.X) + \" \" +  str(vert_pt.Y) + \" \" +  str(vert_pt.Z)       \r\n        face_wkt += \", \" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) + \"))\" # end point\r\n        \r\n        if(face != face_lst[-1]):\r\n            face_wkt += \", \"\r\n        face_wkt_lst += face_wkt        \r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\" \r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for cuboids with geometry = [centroid, length]\r\n    centroid = Solid.Centroid(geo_data)\r\n    offset = geo_data.Length/2\r\n    c_X = centroid.X\r\n    c_Y = centroid.Y\r\n    c_Z = centroid.Z\r\n\r\n    # idea: determine the coordinates of bottom- and top faces\r\n    \r\n    # p1 -- p2\r\n    # |  c   |\r\n    # p3 -- p4           \r\n    # bottom-face\r\n    bottom_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    bottom_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    bottom_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_face = \"((\" + bottom_p1 + \", \" + bottom_p2 + \", \" + bottom_p3 + \", \" + bottom_p4 +  \", \" + bottom_p1 + \"))\"\r\n    # top-face\r\n    top_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    top_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    top_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_face = \"((\" + top_p1 + \", \" + top_p2 + \", \" + top_p3 + \", \" + top_p4 +  \", \" + top_p1 + \"))\"\r\n    # front-face\r\n    front_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    front_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    front_p3 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    front_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    front_face = \"((\" + front_p1 + \", \" + front_p2 + \", \" + front_p3 + \", \" + front_p4 + \", \" + front_p1 + \"))\"\r\n    # back-face             \r\n    back_p1 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    back_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    back_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    back_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    back_face = \"((\" + back_p1 + \", \" + back_p2 + \", \" + back_p3 + \", \" + back_p4 + \", \" + back_p1 + \"))\"\r\n    # left-face\r\n    left_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p2 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p3 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_face = \"((\" + left_p1 + \", \" + left_p2 + \", \" + left_p3 + \", \" + left_p4 + \", \" + left_p1 + \"))\"            \r\n    # right-face\r\n    right_p1 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_p4 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_face = \"((\" + right_p1 + \", \" + right_p2 + \", \" + right_p3 + \", \" + right_p4 + \", \" + right_p1 + \"))\"\r\n    \r\n    cuboid_face = bottom_face + \", \" + top_face + \", \" + front_face + \", \" + back_face + \", \" + left_face + \", \" + right_face\r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    try:\r\n        wktLiteral += cuboid_face\r\n    except e:\r\n        return e\r\n    print(cuboid_face)\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:POLYGON>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    wktLiteral += \"POLYGON Z((\";\r\n    \r\n    points =  geo_data\r\n    originP = points[0];\r\n    \r\n    wktLiteral += str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z) # start point\r\n    for i in range(1, len(points)):\r\n        wktLiteral += \", \" + str(points[i].X) + \" \" +  str(points[i].Y) + \" \" +  str(points[i].Z);       \r\n    wktLiteral += \", \" + str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z); # end point\r\n    wktLiteral += \"))\"\r\n    \r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:POLYGON>\";\r\n    return wktLiteral\r\n\r\n#####\r\ndef wkt_Converter(geo_obj):\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n    geoSparqlNamespace = \"http://www.opengis.net/ont/geosparql#\"\r\n    exampleInstanceNamespace = \"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\"\r\n    \r\n    res = []\r\n    geo_data = geo_obj[0];\r\n    name = geo_obj[1];\r\n    geometryType = geo_obj[2];\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_ROTATION\"):\r\n        res.append(multipolygonInRotation2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_SPHERE\"):\r\n        res.append(sphere2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n        \r\n    if(geometryType.upper() == \"MULTIPOLYGON_MESH\"):\r\n        res.append(mesh2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n     \r\n    if(geometryType.upper() == \"MULTIPOLYGON\"):\r\n        res.append(multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON_ROTATION\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"LINESTRING\"):\r\n        res.append(lineString2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    return res\r\n\r\n############## RDF Wrapper ###############\r\ndef RDF_Wrapper(WKT_res):\r\n    rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\r\n    owl=\"http://www.w3.org/2002/07/owl#\";\r\n    ogc=\"http://www.opengis.net/\";\r\n    my=\"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\";\r\n    gml=\"http://www.opengis.net/ont/gml#\";\r\n    geo=\"http://www.opengis.net/ont/geosparql#\";\r\n    geof=\"http://www.opengis.net/def/function/geosparql/\";\r\n    rdfs=\"http://www.w3.org/2000/01/rdf-schema#\";\r\n    uom=\"http://www.opengis.net/def/uom/OGC/1.0/\";\r\n    sf=\"http://www.opengis.net/ont/sf#\";\r\n    xsd=\"http://www.w3.org/2001/XMLSchema#\";\r\n    geor=\"http://www.opengis.net/def/rule/geosparql/\";\r\n    namespaces = {\t\"rdf\" : rdf,\r\n                \t\"owl\" : owl,\r\n                \t\"ogc\" : ogc,\r\n                \t\"my\" : my,\r\n                \t\"gml\" : gml,\r\n                \t\"geo\" : geo,\r\n                \t\"geof\": geof,\r\n                \t\"rdfs\": rdfs,\r\n                \t\"uom\": uom,\r\n                \t\"sf\": sf,\r\n                \t\"xsd\": xsd,\r\n                \t\"geor\": geor\r\n            }\r\n    inserts = WKT_res\r\n    \r\n    # open RDF header\r\n    rdfStr = \"<rdf:RDF\";\r\n    \r\n    # handle Namespaces\r\n    for key in namespaces:\r\n        rdfStr += \" xmlns:\" + key + \"='\" + namespaces[key] + \"'\";\r\n    \r\n    rdfStr += \">\";\r\n    \r\n    #add inserts\r\n    \r\n    rdfStr += \"<rdf:Description rdf:about='my:\" + \"RootModel\" + \"'>\";\r\n    \r\n    for insert in inserts:\r\n        rdfStr += insert;\r\n    \r\n    rdfStr += \"</rdf:Description>\"\r\n    \r\n    # close RDF header\r\n    rdfStr += \"</rdf:RDF>\"\r\n    \r\n    # Weisen Sie Ihre Ausgabe der OUT-Variablen zu.\r\n    return rdfStr\r\n\r\n############## Ground Truth Generator ###############\r\ndef getGeometry(geo_obj):\r\n    return geo_obj[3]\r\n\r\ndef getGeoType(geo_obj):\r\n    return geo_obj[2]\r\n    \r\ndef getGeoName(geo_obj):\r\n    return geo_obj[1]\r\n    \r\ndef ground_truth_generator(geometry_lst):\r\n    geo_lst = geometry_lst\r\n    inter_geo_dict = {}\r\n    for i in range(0, len(geo_lst)-1):\r\n        geo_obj_1 = geo_lst[i]\r\n        geometry_1 = getGeometry(geo_obj_1)\r\n    \r\n        geo_obj_1_has_intersection = False\r\n        for j in range(1, len(geo_lst)):\r\n            geo_obj_2 = geo_lst[j]\r\n            geometry_2 = getGeometry(geo_obj_2)\r\n            \r\n            if getGeoName(geo_obj_1) != getGeoName(geo_obj_2):\r\n                temp_bool = False\r\n                try:\r\n                    temp_bool = Geometry.DoesIntersect(geometry_1, geometry_2)\r\n                except Exception as err:\r\n                    print(f\"Unexpected {err=}, {type(err)=}\")\r\n                if temp_bool:\r\n                    geo_obj_1_has_intersection = True\r\n                    inter_geo_dict[getGeoName(geo_obj_2)] = getGeoType(geo_obj_2)\r\n                    \r\n        if geo_obj_1_has_intersection:\r\n            inter_geo_dict[getGeoName(geo_obj_1)] = getGeoType(geo_obj_1)    \r\n    #================= Output ====================\r\n    if inter_geo_dict is None:\r\n        inter_geo_dict = {}\r\n    return inter_geo_dict\r\n    \r\n############## RDF 2 JSON ###############\r\ndef rdfParsing2GeoData(str):\r\n    \"\"\" it returns the json file in structure like { \"POLYGON1\" : [...], \r\n                                                     \"POLYGON2\" : [...], \r\n                                                     \"MULTIPOLYGON1\" : [...], ...\r\n                                                    }\r\n    \"\"\"\r\n    #dom = parse(path)\r\n    #tree = ET.ElementTree(ET.fromstring(str))\r\n    geo_dict = {}\r\n    tree = io.StringIO(str)\r\n    dom = parse(tree)\r\n    data = dom.documentElement\r\n    rdf_desc_lst = data.getElementsByTagName(\"rdf:Description\")\r\n    # geo_in_wkt = data.getElementsByTagName(\"geo:asWKT\")\r\n\r\n    for i in range(1, len(rdf_desc_lst)): # first description element (root element) should be removed.\r\n        descr_el = rdf_desc_lst[i]\r\n        geo_name_num = descr_el.attributes._attrs['rdf:about'].nodeValue.split('#')[1]\r\n        geo_wkt_data = \"\"\r\n        try:\r\n            geo_wkt_data = descr_el.childNodes[0].firstChild.data\r\n        except:\r\n            geo_wkt_data = descr_el.childNodes[1].firstChild.data\r\n        geo_algebra_lst = []\r\n\r\n        if ( geo_name_num.find('POINT') != -1 or\r\n            geo_name_num.find('Point') != -1 ):\r\n            \r\n            wkt_data_lst = geo_wkt_data.split(\"(\")[1] # remove title 'POINT'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n\r\n            pt_algebra_lst = []\r\n            pt_str_lst = vert_str_lst.split(\" \")\r\n\r\n            pt_algebra_lst = [ float(pt_str) for pt_str in pt_str_lst ]\r\n            geo_algebra_lst.append(pt_algebra_lst)\r\n            \r\n        if ( geo_name_num.find('LINESTRING') != -1 or\r\n            geo_name_num.find('Linestring') != -1 or\r\n            geo_name_num.find('LINE') != -1 or\r\n            geo_name_num.find('Line') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'LINESTRING'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            line_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)):\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                line_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(line_algebra_lst)\r\n\r\n        if ( geo_name_num.find('POLYGON') != -1 or \r\n            geo_name_num.find('Polygon') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'POLYGON Z'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            face_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                face_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(face_algebra_lst)\r\n\r\n        if ( geo_name_num.find('MULTIPOLYGON') != -1 or\r\n            geo_name_num.find('Multipolygon') != -1  or\r\n            geo_name_num.find('CUBE') != -1 or\r\n            geo_name_num.find('Cube') != -1 or\r\n            geo_name_num.find('SPHERE') != -1 or\r\n            geo_name_num.find('Sphere') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"(((\")[1] # remove title 'MULTIPOLYGON Z'\r\n            face_str_lst = wkt_data_lst.split(\"), \")\r\n\r\n            face_algebra_lst = []\r\n            for face_str in face_str_lst:\r\n                vert_str_lst = face_str.replace( \")\", \"\" ) # remove character ')'\r\n                vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n                vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n                pt_algebra_lst = []\r\n                for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                    pt_str_lst = vert_str_lst[i].split(\" \")\r\n                        \r\n                    pt_algebra = [ float(pt_str) for pt_str in pt_str_lst ]\r\n                    pt_algebra_lst.append(pt_algebra)\r\n\r\n                face_algebra_lst.append(pt_algebra_lst)\r\n            geo_algebra_lst = face_algebra_lst\r\n\r\n        if geo_name_num not in geo_dict.keys():\r\n            geo_dict[geo_name_num] = geo_algebra_lst\r\n    return geo_dict\r\n    \r\n######################################################\r\n############## RDF File Configuration ###############\r\nrdf_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\rdf\\\\case_study\\\\\"\r\nrdf_file_contents = \"\"\r\n\r\n############## JSON File Configuration ###############\r\njson_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\case_study\\\\\"\r\njson_ground_truth_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\ground_truth\\\\\"\r\njson_file_contents = {\"test\":\"\"}\r\n\r\n########## JSON Export #############\r\ndef JSON_export(json_file_path, json_file_name, json_file_contents):\r\n    \r\n    tmp_json_file_path = json_file_path + json_file_name\r\n    try:\r\n        with open(tmp_json_file_path, \"w\") as f:\r\n            json.dump(json_file_contents, f, sort_keys=True, indent=4)\r\n            #f.write(json_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{json_file_path}' already exists.\")\r\n\r\n########## RDF Export #############\r\ndef rdf_export(rdf_file_path, rdf_file_name, rdf_file_contents):\r\n\r\n    tmp_rdf_file_path = rdf_file_path + rdf_file_name\r\n    try:\r\n        with open(tmp_rdf_file_path, \"w\") as f:\r\n            f.write(rdf_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{rdf_file_path}' already exists.\")\r\n        \r\n        \r\n############## Contents (RDF, JSON) Generation ###############\r\n# convert RDF file to JSON file and store it locally\r\nrdf_2_json_contents = rdfParsing2GeoData(IN[0])\r\n#====================================\r\nOUT = rdf_2_json_contents",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "c7540fe3dd7543638e8f28914063e20b",
      "Inputs": [
        {
          "Id": "41d28292a07e4d32bf8345608e964179",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5842f689c4e8422dba0efdbad2556478",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nimport json\r\nimport os\r\nimport random\r\nimport pickle\r\nimport io\r\nimport ctypes\r\nimport math\r\nimport xml.etree.ElementTree as ET\r\nsys.path.append(r\"C:\\Users\\yhe\\AppData\\Local\\Programs\\Python\\Python310\\Lib\\site-packages\")\r\nfrom xml.dom.minidom import parse, parseString\r\n\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('DSCoreNodes')\r\nfrom DSCore import *\r\nclr.AddReference('GeometryColor')\r\nfrom Modifiers import GeometryColor\r\nclr.AddReference('MeshToolkit')\r\nfrom Autodesk.Dynamo.MeshToolkit import *\r\n\r\ndef Mesh_to_WKT(solid, solid_name):\r\n    #sphere_mesh = Mesh.ByGeometry(solid)\r\n    #mesh_lst = Mesh.Explode(sphere_mesh)\r\n    mesh_lst=solid\r\n    mesh_vert_lst = []\r\n    \r\n    for mesh in mesh_lst:\r\n        mesh_vert_lst.append(Mesh.Vertices(mesh))\r\n        \r\n    geo_data = mesh_vert_lst\r\n    geo_name = \"MULTIPOLYGON\" + \"-\" + str(solid_name)\r\n    geo_type = \"MULTIPOLYGON_MESH\"\r\n    geometry = solid\r\n    geo_obj_solid = (geo_data, geo_name, geo_type, geometry)\r\n\r\n    return geo_obj_solid\r\n\r\n#################### WKT Converter #############################\r\ndef sphere2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n\r\ndef mesh2WKT(surface_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for curves/surfaces\r\n    face_wkt_lst = \"\"\r\n    for vert_lst in surface_lst:\r\n        \r\n        vert_wkt_lst = \"((\"\r\n        for vert in vert_lst:\r\n        \r\n            vert_wkt_lst += str(vert.X) + \" \" +  str(vert.Y) + \" \" +  str(vert.Z);\r\n            if vert != vert_lst[-1]:\r\n                vert_wkt_lst += \", \"\r\n        \r\n        vert_wkt_lst += \", \" + str(vert_lst[0].X) + \" \" +  str(vert_lst[0].Y) + \" \" +  str(vert_lst[0].Z) + \"))\";\r\n        \r\n        face_wkt_lst += vert_wkt_lst\r\n        if vert_lst != surface_lst[-1]:\r\n            face_wkt_lst += \", \"          \r\n            \r\n    wktLiteral += \"MULTIPOLYGON Z(\";\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:MultiPolygon>\";\r\n    return wktLiteral\r\n    \r\ndef multipolygonInRotation2WKT(face_lst, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    face_wkt_lst = \"\"\r\n    \r\n    for face in face_lst:\r\n        \r\n        vertice_lst = face.Vertices\r\n        org_vert_pt = vertice_lst[0].PointGeometry \r\n        face_wkt = \"((\" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) # start point\r\n    \r\n        for i in range(1, len(vertice_lst)):\r\n            vert_pt = vertice_lst[i].PointGeometry\r\n            face_wkt += \", \" + str(vert_pt.X) + \" \" +  str(vert_pt.Y) + \" \" +  str(vert_pt.Z)       \r\n        face_wkt += \", \" + str(org_vert_pt.X) + \" \" +  str(org_vert_pt.Y) + \" \" +  str(org_vert_pt.Z) + \"))\" # end point\r\n        \r\n        if(face != face_lst[-1]):\r\n            face_wkt += \", \"\r\n        face_wkt_lst += face_wkt        \r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    wktLiteral += face_wkt_lst\r\n    wktLiteral += \")\" \r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:MultiPolygon>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    \r\n    # for cuboids with geometry = [centroid, length]\r\n    centroid = Solid.Centroid(geo_data)\r\n    offset = geo_data.Length/2\r\n    c_X = centroid.X\r\n    c_Y = centroid.Y\r\n    c_Z = centroid.Z\r\n\r\n    # idea: determine the coordinates of bottom- and top faces\r\n    \r\n    # p1 -- p2\r\n    # |  c   |\r\n    # p3 -- p4           \r\n    # bottom-face\r\n    bottom_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    bottom_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    bottom_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    bottom_face = \"((\" + bottom_p1 + \", \" + bottom_p2 + \", \" + bottom_p3 + \", \" + bottom_p4 +  \", \" + bottom_p1 + \"))\"\r\n    # top-face\r\n    top_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    top_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    top_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    top_face = \"((\" + top_p1 + \", \" + top_p2 + \", \" + top_p3 + \", \" + top_p4 +  \", \" + top_p1 + \"))\"\r\n    # front-face\r\n    front_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    front_p2 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    front_p3 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    front_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    front_face = \"((\" + front_p1 + \", \" + front_p2 + \", \" + front_p3 + \", \" + front_p4 + \", \" + front_p1 + \"))\"\r\n    # back-face             \r\n    back_p1 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    back_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset) \r\n    back_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset) \r\n    back_p4 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    back_face = \"((\" + back_p1 + \", \" + back_p2 + \", \" + back_p3 + \", \" + back_p4 + \", \" + back_p1 + \"))\"\r\n    # left-face\r\n    left_p1 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p2 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z-offset)\r\n    left_p3 = str(c_X+offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_p4 = str(c_X-offset) + \" \" + str(c_Y-offset) + \" \" + str(c_Z+offset)\r\n    left_face = \"((\" + left_p1 + \", \" + left_p2 + \", \" + left_p3 + \", \" + left_p4 + \", \" + left_p1 + \"))\"            \r\n    # right-face\r\n    right_p1 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p2 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z-offset)\r\n    right_p3 = str(c_X+offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_p4 = str(c_X-offset) + \" \" + str(c_Y+offset) + \" \" + str(c_Z+offset)\r\n    right_face = \"((\" + right_p1 + \", \" + right_p2 + \", \" + right_p3 + \", \" + right_p4 + \", \" + right_p1 + \"))\"\r\n    \r\n    cuboid_face = bottom_face + \", \" + top_face + \", \" + front_face + \", \" + back_face + \", \" + left_face + \", \" + right_face\r\n    \r\n    wktLiteral += \"MULTIPOLYGON Z(\"\r\n    try:\r\n        wktLiteral += cuboid_face\r\n    except e:\r\n        return e\r\n    print(cuboid_face)\r\n    wktLiteral += \")\"\r\n    wktLiteral += \"</geo:asWKT>\"\r\n    wktLiteral += \"</rdf:Description>\"\r\n    wktLiteral += \"</sf:MultiPolygon>\"\r\n    return wktLiteral\r\n    \r\n    \r\ndef polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name):\r\n    wktLiteral = \"<sf:POLYGON>\";\r\n    wktLiteral += \"<rdf:Description rdf:about='\" + exampleInstanceNamespace + str(name) + \"'>\";\r\n    wktLiteral += \"<geo:asWKT rdf:datatype='\" + geoSparqlNamespace + \"wktLiteral'>\";\r\n    wktLiteral += \"POLYGON Z((\";\r\n    \r\n    points =  geo_data\r\n    originP = points[0];\r\n    \r\n    wktLiteral += str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z) # start point\r\n    for i in range(1, len(points)):\r\n        wktLiteral += \", \" + str(points[i].X) + \" \" +  str(points[i].Y) + \" \" +  str(points[i].Z);       \r\n    wktLiteral += \", \" + str(originP.X) + \" \" +  str(originP.Y) + \" \" +  str(originP.Z); # end point\r\n    wktLiteral += \"))\"\r\n    \r\n    wktLiteral += \"</geo:asWKT>\";\r\n    wktLiteral += \"</rdf:Description>\";\r\n    wktLiteral += \"</sf:POLYGON>\";\r\n    return wktLiteral\r\n\r\n#####\r\ndef wkt_Converter(geo_obj):\r\n# The inputs to this node will be stored as a list in the IN variables.\r\n    geoSparqlNamespace = \"http://www.opengis.net/ont/geosparql#\"\r\n    exampleInstanceNamespace = \"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\"\r\n    \r\n    res = []\r\n    geo_data = geo_obj[0];\r\n    name = geo_obj[1];\r\n    geometryType = geo_obj[2];\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_ROTATION\"):\r\n        res.append(multipolygonInRotation2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    \r\n    if(geometryType.upper() == \"MULTIPOLYGON_SPHERE\"):\r\n        res.append(sphere2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n        \r\n    if(geometryType.upper() == \"MULTIPOLYGON_MESH\"):\r\n        res.append(mesh2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))    \r\n     \r\n    if(geometryType.upper() == \"MULTIPOLYGON\"):\r\n        res.append(multipolygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON_ROTATION\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"POLYGON\"):\r\n        res.append(polygon2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n        \r\n    if(geometryType.upper() == \"LINESTRING\"):\r\n        res.append(lineString2WKT(geo_data, exampleInstanceNamespace, geoSparqlNamespace, name))\r\n    return res\r\n\r\n############## RDF Wrapper ###############\r\ndef RDF_Wrapper(WKT_res):\r\n    rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\";\r\n    owl=\"http://www.w3.org/2002/07/owl#\";\r\n    ogc=\"http://www.opengis.net/\";\r\n    my=\"https://www.inf.bi.ruhr-uni-bochum.de/jena/#\";\r\n    gml=\"http://www.opengis.net/ont/gml#\";\r\n    geo=\"http://www.opengis.net/ont/geosparql#\";\r\n    geof=\"http://www.opengis.net/def/function/geosparql/\";\r\n    rdfs=\"http://www.w3.org/2000/01/rdf-schema#\";\r\n    uom=\"http://www.opengis.net/def/uom/OGC/1.0/\";\r\n    sf=\"http://www.opengis.net/ont/sf#\";\r\n    xsd=\"http://www.w3.org/2001/XMLSchema#\";\r\n    geor=\"http://www.opengis.net/def/rule/geosparql/\";\r\n    namespaces = {\t\"rdf\" : rdf,\r\n                \t\"owl\" : owl,\r\n                \t\"ogc\" : ogc,\r\n                \t\"my\" : my,\r\n                \t\"gml\" : gml,\r\n                \t\"geo\" : geo,\r\n                \t\"geof\": geof,\r\n                \t\"rdfs\": rdfs,\r\n                \t\"uom\": uom,\r\n                \t\"sf\": sf,\r\n                \t\"xsd\": xsd,\r\n                \t\"geor\": geor\r\n            }\r\n    inserts = WKT_res\r\n    \r\n    # open RDF header\r\n    rdfStr = \"<rdf:RDF\";\r\n    \r\n    # handle Namespaces\r\n    for key in namespaces:\r\n        rdfStr += \" xmlns:\" + key + \"='\" + namespaces[key] + \"'\";\r\n    \r\n    rdfStr += \">\";\r\n    \r\n    #add inserts\r\n    \r\n    rdfStr += \"<rdf:Description rdf:about='my:\" + \"RootModel\" + \"'>\";\r\n    \r\n    for insert in inserts:\r\n        rdfStr += insert;\r\n    \r\n    rdfStr += \"</rdf:Description>\"\r\n    \r\n    # close RDF header\r\n    rdfStr += \"</rdf:RDF>\"\r\n    \r\n    # Weisen Sie Ihre Ausgabe der OUT-Variablen zu.\r\n    return rdfStr\r\n\r\n############## Ground Truth Generator ###############\r\ndef getGeometry(geo_obj):\r\n    return geo_obj[3]\r\n\r\ndef getGeoType(geo_obj):\r\n    return geo_obj[2]\r\n    \r\ndef getGeoName(geo_obj):\r\n    return geo_obj[1]\r\n    \r\ndef ground_truth_generator(geometry_lst):\r\n    geo_lst = geometry_lst\r\n    inter_geo_dict = {}\r\n    for i in range(0, len(geo_lst)-1):\r\n        geo_obj_1 = geo_lst[i]\r\n        geometry_1 = getGeometry(geo_obj_1)\r\n    \r\n        geo_obj_1_has_intersection = False\r\n        for j in range(1, len(geo_lst)):\r\n            geo_obj_2 = geo_lst[j]\r\n            geometry_2 = getGeometry(geo_obj_2)\r\n            \r\n            if getGeoName(geo_obj_1) != getGeoName(geo_obj_2):\r\n                temp_bool = False\r\n                try:\r\n                    temp_bool = Geometry.DoesIntersect(geometry_1, geometry_2)\r\n                except Exception as err:\r\n                    print(f\"Unexpected {err=}, {type(err)=}\")\r\n                if temp_bool:\r\n                    geo_obj_1_has_intersection = True\r\n                    inter_geo_dict[getGeoName(geo_obj_2)] = getGeoType(geo_obj_2)\r\n                    \r\n        if geo_obj_1_has_intersection:\r\n            inter_geo_dict[getGeoName(geo_obj_1)] = getGeoType(geo_obj_1)    \r\n    #================= Output ====================\r\n    if inter_geo_dict is None:\r\n        inter_geo_dict = {}\r\n    return inter_geo_dict\r\n    \r\n############## RDF 2 JSON ###############\r\ndef rdfParsing2GeoData(str):\r\n    \"\"\" it returns the json file in structure like { \"POLYGON1\" : [...], \r\n                                                     \"POLYGON2\" : [...], \r\n                                                     \"MULTIPOLYGON1\" : [...], ...\r\n                                                    }\r\n    \"\"\"\r\n    #dom = parse(path)\r\n    #tree = ET.ElementTree(ET.fromstring(str))\r\n    geo_dict = {}\r\n    tree = io.StringIO(str)\r\n    dom = parse(tree)\r\n    data = dom.documentElement\r\n    rdf_desc_lst = data.getElementsByTagName(\"rdf:Description\")\r\n    # geo_in_wkt = data.getElementsByTagName(\"geo:asWKT\")\r\n\r\n    for i in range(1, len(rdf_desc_lst)): # first description element (root element) should be removed.\r\n        descr_el = rdf_desc_lst[i]\r\n        geo_name_num = descr_el.attributes._attrs['rdf:about'].nodeValue.split('#')[1]\r\n        geo_wkt_data = \"\"\r\n        try:\r\n            geo_wkt_data = descr_el.childNodes[0].firstChild.data\r\n        except:\r\n            geo_wkt_data = descr_el.childNodes[1].firstChild.data\r\n        geo_algebra_lst = []\r\n\r\n        if ( geo_name_num.find('POINT') != -1 or\r\n            geo_name_num.find('Point') != -1 ):\r\n            \r\n            wkt_data_lst = geo_wkt_data.split(\"(\")[1] # remove title 'POINT'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n\r\n            pt_algebra_lst = []\r\n            pt_str_lst = vert_str_lst.split(\" \")\r\n\r\n            pt_algebra_lst = [ float(pt_str) for pt_str in pt_str_lst ]\r\n            geo_algebra_lst.append(pt_algebra_lst)\r\n            \r\n        if ( geo_name_num.find('LINESTRING') != -1 or\r\n            geo_name_num.find('Linestring') != -1 or\r\n            geo_name_num.find('LINE') != -1 or\r\n            geo_name_num.find('Line') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'LINESTRING'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            line_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)):\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                line_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(line_algebra_lst)\r\n\r\n        if ( geo_name_num.find('POLYGON') != -1 or \r\n            geo_name_num.find('Polygon') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"((\")[1] # remove title 'POLYGON Z'\r\n            vert_str_lst = wkt_data_lst\r\n            vert_str_lst = vert_str_lst.replace( \")\", \"\" ) # remove character ')'\r\n            vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n            vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n            face_algebra_lst = []\r\n            for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                pt_str_lst = vert_str_lst[i].split(\" \")\r\n                face_algebra_lst.append([ float(pt_str) for pt_str in pt_str_lst ])\r\n            geo_algebra_lst.append(face_algebra_lst)\r\n\r\n        if ( geo_name_num.find('MULTIPOLYGON') != -1 or\r\n            geo_name_num.find('Multipolygon') != -1  or\r\n            geo_name_num.find('CUBE') != -1 or\r\n            geo_name_num.find('Cube') != -1 or\r\n            geo_name_num.find('SPHERE') != -1 or\r\n            geo_name_num.find('Sphere') != -1 ):\r\n\r\n            wkt_data_lst = geo_wkt_data.split(\"(((\")[1] # remove title 'MULTIPOLYGON Z'\r\n            face_str_lst = wkt_data_lst.split(\"), \")\r\n\r\n            face_algebra_lst = []\r\n            for face_str in face_str_lst:\r\n                vert_str_lst = face_str.replace( \")\", \"\" ) # remove character ')'\r\n                vert_str_lst = vert_str_lst.replace( \"(\", \"\" ) # remove character '('\r\n                vert_str_lst = vert_str_lst.split(\", \")\r\n\r\n                pt_algebra_lst = []\r\n                for i in range(0, len(vert_str_lst)-1): # last point not included\r\n\r\n                    pt_str_lst = vert_str_lst[i].split(\" \")\r\n                        \r\n                    pt_algebra = [ float(pt_str) for pt_str in pt_str_lst ]\r\n                    pt_algebra_lst.append(pt_algebra)\r\n\r\n                face_algebra_lst.append(pt_algebra_lst)\r\n            geo_algebra_lst = face_algebra_lst\r\n\r\n        if geo_name_num not in geo_dict.keys():\r\n            geo_dict[geo_name_num] = geo_algebra_lst\r\n    return geo_dict\r\n    \r\n######################################################\r\n############## RDF File Configuration ###############\r\nrdf_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\rdf\\\\case_study\\\\\"\r\nrdf_file_contents = \"\"\r\n\r\n############## JSON File Configuration ###############\r\njson_case_study_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\case_study\\\\\"\r\njson_ground_truth_file_path = \"C:\\\\Users\\\\yhe\\\\Documents\\\\Developer\\\\Repo\\\\ExtendingJena\\\\src\\\\main\\\\resources\\\\JSON\\\\ground_truth\\\\\"\r\njson_file_contents = {\"test\":\"\"}\r\n\r\n########## JSON Export #############\r\ndef JSON_export(json_file_path, json_file_name, json_file_contents):\r\n    \r\n    tmp_json_file_path = json_file_path + json_file_name\r\n    try:\r\n        with open(tmp_json_file_path, \"w\") as f:\r\n            json.dump(json_file_contents, f, sort_keys=True, indent=4)\r\n            #f.write(json_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{json_file_path}' already exists.\")\r\n\r\n########## RDF Export #############\r\ndef rdf_export(rdf_file_path, rdf_file_name, rdf_file_contents):\r\n\r\n    tmp_rdf_file_path = rdf_file_path + rdf_file_name\r\n    try:\r\n        with open(tmp_rdf_file_path, \"w\") as f:\r\n            f.write(rdf_file_contents)\r\n    except FileExistsError:\r\n        print(f\"File '{rdf_file_path}' already exists.\")\r\n        \r\n        \r\n############## Contents (RDF, JSON) Generation ###############\r\nJSON_export(json_case_study_file_path, \"2nd_CaseStudy_TubeSolid.json\", IN[0])\r\n#====================================\r\nOUT = 0",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "e50bfb0e4a79498ba3eb32c88cd2404e",
      "Inputs": [
        {
          "Id": "680249a197e34fd485acb40ae6bf1f8c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b2da947f4ac74d15accbcd24ead5fd3a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "2d49fe4ee27e434fb6d85fd1e7acc32c",
      "Inputs": [
        {
          "Id": "f2305506434e47ae972bddd9bd9a4960",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1041a38918024221b3054473a8c521c4",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"MULTIPOLYGON-Tube\";",
      "Id": "85f4071220ad45b89cfab45e8095aa09",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e8b2d4fe8fb246139705eb4bc9c83eff",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "62ccd59d994b46339086ad7424f90c3f",
      "Inputs": [
        {
          "Id": "0b39afb2b5ef4cef8d49eb67d0d7d857",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a37a0ae9ee9743df961cb92bd02ef64c",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    }
  ],
  "Connectors": [
    {
      "Start": "44970cf3e97d44d0abf653a16aaa24ae",
      "End": "464228951ec640e1ae9329759a2baf71",
      "Id": "f1009190498c4237bed8183e3135e64e"
    },
    {
      "Start": "74d44641b1724279b81f6df55ea4e105",
      "End": "defda963073f43fda5beb44e3cf2e580",
      "Id": "55172d81ac1346f99c2d1e1325d6d76d"
    },
    {
      "Start": "1f05af3b9a2c4a77b47cec137991ad26",
      "End": "7fbe5c8e84444637b66c8c145e26d6a4",
      "Id": "974df9afd0924a7eaec1b5208e0896be"
    },
    {
      "Start": "6f0247fb4a764148bc205f67bacf63cb",
      "End": "5fefb07388804e799894e571c55bf311",
      "Id": "62e032bce76d4a4f8e92aa0e6e1a5de6"
    },
    {
      "Start": "f78b9d3217f44a50b5c12db8919a3a23",
      "End": "64c2151a4c214d93ac41f21c0193c74e",
      "Id": "32ef70ffd1b241fd90d4b3f8c1a251fd"
    },
    {
      "Start": "0da531e9f78940519bf531c41ca22fe7",
      "End": "72942da000b549aab1c67364cdbd7b42",
      "Id": "1eed28e32cb34039abd80e9e6e6ac6ec"
    },
    {
      "Start": "233c897a6e984bf782fae8755e36ce44",
      "End": "8e5b7e6507c145f897ba93a8ad177b2c",
      "Id": "b574b01ed7b64ae7a7647d83bd4b82d2"
    },
    {
      "Start": "106a082e6b0c4f198f3617052c02ead9",
      "End": "7cda9a91b03b4dc781aa6958fc637df9",
      "Id": "bbcd4c49928b4b78a9b8fe69949bacbd"
    },
    {
      "Start": "c1b2b7651fbb4d4ea7e5c288ad726217",
      "End": "2740ef15aa6c4c6dad9325b4c4ade906",
      "Id": "f33fab21ca00488cab691f8f17c2e3bd"
    },
    {
      "Start": "a3f112d26789468a9baa1976c4926319",
      "End": "bb79d962d0eb4a22bc7f773f1266df64",
      "Id": "6215cc83a451402492d5ad5c98d8a492"
    },
    {
      "Start": "a859e99054044f08bc032108fc73b270",
      "End": "722757df34754227a6c42733cc5f89d9",
      "Id": "18a4d3e6df374ce6930adcfc9e6755e2"
    },
    {
      "Start": "f9bf8e7d148b416f82b935a51b762408",
      "End": "a6fa961d561c492dbea6f0acb6e326a8",
      "Id": "8ab4d2c4e5dd4d2ba26af9f619341ed6"
    },
    {
      "Start": "6857fed3a21e454aa43bce04041e9472",
      "End": "d505648d787c49258ff7e0bcf186ee59",
      "Id": "5a7ed9955d114f5ba6f0090ef7d1c2b6"
    },
    {
      "Start": "eae4b4c0f32041f8be727062a8d21fa0",
      "End": "8ee1f68e1cb743ef828d5c74b3e0c09d",
      "Id": "0a3069864e144901b16ec84db79823e9"
    },
    {
      "Start": "efbc5a56a97b46ae97ef6538c2873bf5",
      "End": "667467b6a70240daa8ee449518c0513b",
      "Id": "dcd7ad5e2e064cc58f059f17c531bca2"
    },
    {
      "Start": "6b7b5a68004f4636a6888daece7469b3",
      "End": "f13dfdf7e40e43baa4054924dbdeb7ba",
      "Id": "f61367cc72bb4366bf35bad7d5f2aaf5"
    },
    {
      "Start": "072c52ba4fe54dd597451e602311923d",
      "End": "65e96e127f9c457dac8abbd21fe425f8",
      "Id": "2a0e891b70ca4884adcb1f0fb648f598"
    },
    {
      "Start": "d74e262f2e964785b9400c5ae10ad459",
      "End": "ce73cf6d95474db6abfe5a3a4c8ddd73",
      "Id": "b259758c41df494ab99cb86a9ac9fb3c"
    },
    {
      "Start": "079f6a378d8446cda5c4d5f2c4bd22f8",
      "End": "db4f160c1466445f8f7b4bb3c8371ad8",
      "Id": "101e9e492ced482082d47fa24bdead41"
    },
    {
      "Start": "f2ecd0615e654ce79ec47e7aa856e177",
      "End": "2d0dde48115c4d7397b6b726f96f57d1",
      "Id": "3fa6df4029934a69a248c54f1db3d595"
    },
    {
      "Start": "df1cf4432c9e4e769f81b9ffc1acd030",
      "End": "23b92bf374f44dc7a3251bed331eb73e",
      "Id": "718da7738bcc40d08236a4b3e350a6c2"
    },
    {
      "Start": "a918432b161d45bd8b9e0f9a9f940a86",
      "End": "24286e67ceda4866931eb6fe9dd973d5",
      "Id": "871f4a7b0b1a4f40ad880c4e7659b959"
    },
    {
      "Start": "c6be0e296a55471091137a7262cf8215",
      "End": "0fc202ca9b8943989b3a6fe344fa42a4",
      "Id": "8083a23f317c4ad5ad8986ca5f655c62"
    },
    {
      "Start": "a52211e2d53f45e08c04d27dddd0d983",
      "End": "9de2c501c9d343b7bd59c0e533c7307f",
      "Id": "0f7357f4dd1c44f598d79fc81f5b7945"
    },
    {
      "Start": "24bb86bf1dd44889b585d8e667d445e9",
      "End": "967ee1250d2c41869e784958416a7dbc",
      "Id": "f2c1f1a888254472a4c8e72f97fb686f"
    },
    {
      "Start": "5991f720227b451c8d25e00402665faf",
      "End": "4f2efb1902bd41f9975e312e48cdd002",
      "Id": "c33e1d65ac5442f89a679f8066dbb04f"
    },
    {
      "Start": "0df8bf00556d40b18f2c927ace481e41",
      "End": "df29efec14514b119f11618c40995839",
      "Id": "d1fe7e77f3d948a0b84213fd8f427447"
    },
    {
      "Start": "be129cf28b8e4afb8de593f7d74082c2",
      "End": "6000328b4c9b4241a890b5b95a6bcf07",
      "Id": "5602c7987f234a44b9a291e9cca9ec12"
    },
    {
      "Start": "804231be492d4fbe9d5787cc16e075bf",
      "End": "00a631760419429499076c587b7ccf49",
      "Id": "86ce22fe1c2f4823857fa6e305c9a875"
    },
    {
      "Start": "7b4dc3b9142f4da8a6094adccc4ec2ab",
      "End": "dadea80c3e6545cfaf6fb6cf4de613dd",
      "Id": "19f7c37c81174f0ca2e54a30310b0c7f"
    },
    {
      "Start": "3c2aaeae2e3e4b77aa0b5e50badbb851",
      "End": "5e97a5f2515845cabc272188e2b8c8c1",
      "Id": "100e2bd8943a4aa5861315a7ad447414"
    },
    {
      "Start": "2e782151ac1f4941970246fdae8376cc",
      "End": "77a47643385b4fc19a8416ff9d562951",
      "Id": "6c6310b5c4144c5cac107c7dfaf20251"
    },
    {
      "Start": "65b343ad2f494b4b906e102b64d829e5",
      "End": "8c2931c5bafc44ba9a0db3b23826d0d4",
      "Id": "ccf60b988f7a440d819ba71e241a2ce2"
    },
    {
      "Start": "cce340ce43644c33844f0ba9a33ccb06",
      "End": "bb1ec5c1dead4ff497d8ae431e4098ba",
      "Id": "cdded7c4b6a24986af8ab2df782baae7"
    },
    {
      "Start": "c62b171a157d413085be8881528b2342",
      "End": "438193bd1e9345808f76191aa06eebbd",
      "Id": "c2ede22fed654ab8bb79163885cce1de"
    },
    {
      "Start": "1539bc7d0dde4db9a676993fef47ba93",
      "End": "4b01f03b1fa642358c3e4e655269d47a",
      "Id": "05fa4911375242cb8e724702fb7c41e9"
    },
    {
      "Start": "8ba3e3a2692d4a5bae80d6f87e471666",
      "End": "19ab340dd00c48f3be13cad0fb4b5da4",
      "Id": "5031dc905c52434a99f944856a5514c6"
    },
    {
      "Start": "db1623c2fe6b48b8943e0f1071c450c8",
      "End": "bd810ffcfdec4536ba0422562ff7a598",
      "Id": "bd94f32964dd40ed875a96677208fba2"
    },
    {
      "Start": "fb81e190b1b446bc95f55b4eaa6625cb",
      "End": "2b48b1ef04ed4b1bb5cf9b777216da1b",
      "Id": "bcd866a7609340e99b690f5ad02784ac"
    },
    {
      "Start": "adc7c970c01e4be5a66dd52ae9cddc92",
      "End": "02c59f780d5142b0954f036780dca567",
      "Id": "4b0542e0e2474d9cbb1723be3141e331"
    },
    {
      "Start": "adc7c970c01e4be5a66dd52ae9cddc92",
      "End": "118dd3c122074dd68580a7727fd81b40",
      "Id": "ba167b3d5eb342558b9219a729944f2b"
    },
    {
      "Start": "38a13142f22d483e9df84d84e033aad5",
      "End": "4f57ac36f5794860b8b1db364d0c7827",
      "Id": "8fc3037aec2c4c81818795b8a3fc94c4"
    },
    {
      "Start": "25eed006da3449708085b23bcaf5f5ad",
      "End": "dbe4fb041b6d4ba48686dd761da35b0f",
      "Id": "39bb704cc12e4d02816daa5acb707284"
    },
    {
      "Start": "ff9125a2ca874d7aa655aa4d1ade82d9",
      "End": "9a3e1aa1170249c7ba8f8da5301faffb",
      "Id": "3b054c81b2b04a88b767aa490b91e22b"
    },
    {
      "Start": "c83bd21af8da4180af3e6ce057d43418",
      "End": "e4a7bffafcb543d1a3b7ff2b6a7b4c8f",
      "Id": "28e3431a18874bb581981d8d3a633592"
    },
    {
      "Start": "ea0fac4d430f4bddb5f9d919cbab58b2",
      "End": "0602b75f08ab49f1920362091a5a90c1",
      "Id": "305a465f935948de849405c9c407e447"
    },
    {
      "Start": "bfb0fc100520444da6d492c7745ac251",
      "End": "8bc22855f52c4ac7bafffdb70afa370a",
      "Id": "bfa9c3a004c24c23900e2157334e7b8b"
    },
    {
      "Start": "c74c39ee569343adbad53918edbce529",
      "End": "917a16b5e18b4e8abad0a13bcc1d15ad",
      "Id": "35f350e3f9994e9d97b3934118255928"
    },
    {
      "Start": "c74c39ee569343adbad53918edbce529",
      "End": "bffb079b3a3748a289e6351998e11c94",
      "Id": "3689050509b248d9ae52296ae98085ea"
    },
    {
      "Start": "c74c39ee569343adbad53918edbce529",
      "End": "bef2b93049c94e21a41594d8e7d466d8",
      "Id": "3d94c5e61c944cb5843c58366c922157"
    },
    {
      "Start": "64ccabe480f743b08211f7f3283bfae0",
      "End": "104a0cd8606446f4ac0e7bf1e738daed",
      "Id": "fb32a470a13f466b830a840c0df90596"
    },
    {
      "Start": "d603c239e88e4a0d9d311e4a2dffbffb",
      "End": "275be80d2e484b5f98edc583f4f9efbf",
      "Id": "d6e2dffb8e034e3d8877371b8903a34f"
    },
    {
      "Start": "555d9c5b3aaf4df386168fb92f0e473d",
      "End": "5588c500d500420f9d44668992055adf",
      "Id": "67825788af074f3286e9d1105853a91c"
    },
    {
      "Start": "fd1541a0b6ac4e70abd4a73e9dac8f09",
      "End": "a3ff690ea8114520b87205d55e0051ab",
      "Id": "9ad81ad7359c46bb9fdbb9b4e5cb09af"
    },
    {
      "Start": "95dacbfd44d8443d8c58101703f46d2e",
      "End": "f3863eca3aad449982c5d069b287dc75",
      "Id": "ebe37d9ec6e34294bc2f4d3d3c42f56d"
    },
    {
      "Start": "7d8b8434749742419f86c278652ba738",
      "End": "e09782b5a45f4109859dfbbb8094297a",
      "Id": "4b89527a70bd4001980e45165337add3"
    },
    {
      "Start": "d612219bd825430d8906bac2974d5c77",
      "End": "35e0b1ffd92541049dfc9ff9fcb8cc2c",
      "Id": "b80927900b444725bd2c6cf1f7617bbc"
    },
    {
      "Start": "d612219bd825430d8906bac2974d5c77",
      "End": "4dad47c339b243739a595c5344627235",
      "Id": "1e91df85ff16403a9364d4d71a1a4025"
    },
    {
      "Start": "8132c5809a8c4c678b053f63bc4c83e4",
      "End": "e51f7dfecfcf4f57a5fb5e92e6fb3080",
      "Id": "152905dac1494c80ac3ad8b68aa7ed64"
    },
    {
      "Start": "040c14f6702a4565aa329850e14d7288",
      "End": "e144a05b8dad4737826afeb99905ad0c",
      "Id": "b3c1b7e17cd44a7c896c365df370ffd4"
    },
    {
      "Start": "6729f5384ee546cf98bf8452be9e05ab",
      "End": "36af1892260842188764a5522542a481",
      "Id": "c138b582d9804bd487cc18ff9e00bbb7"
    },
    {
      "Start": "dc39c7c07eb041fcb5d34aad2624a3f2",
      "End": "9b5d4af8af5441ffbb3e95a4660bd113",
      "Id": "f0314f5f65584d3db5518e46a4202063"
    },
    {
      "Start": "aefe0eb55ad847cb862825b945fd5835",
      "End": "4bfa4a70b640448ebdfddee69932fdc3",
      "Id": "7ca24c6fa33a4e2b8f439435d2d1ac52"
    },
    {
      "Start": "aefe0eb55ad847cb862825b945fd5835",
      "End": "7f93b7cacdbb479ea35ba1ab6a148e2e",
      "Id": "9f23131274744d64be2ccaa9a158a6ee"
    },
    {
      "Start": "57005050b0244c60a6117a64f9d4d521",
      "End": "0b39afb2b5ef4cef8d49eb67d0d7d857",
      "Id": "3d9244de71594b598f14f9ceab81f3c8"
    },
    {
      "Start": "57005050b0244c60a6117a64f9d4d521",
      "End": "9e203b81eacf41ada186b0acb780e140",
      "Id": "d9363ce2f5fd4512a9002ab72e9a1f47"
    },
    {
      "Start": "0db74c2d55fb42c5b1a4204cf9b6e87b",
      "End": "23ddae57c79049b981129289f871cb78",
      "Id": "1066a8d265e145c7ae656a8e15efb35d"
    },
    {
      "Start": "ed5c37b8e63549f3a6ba212a7541ffe6",
      "End": "9aad7fbae23343c6b84b20545d7196e1",
      "Id": "71b73f6fd17b4ca1b70ad21642d67481"
    },
    {
      "Start": "42fbc33623fa49f1895f7b207f307a0e",
      "End": "721d249ec53b47c9828ff826a5c8ad11",
      "Id": "ca1c19f266574c9bab0e3b32a9a26f66"
    },
    {
      "Start": "2fb40fa859454852997607e474bc22c4",
      "End": "26bb73db672d4039995ed896f624a850",
      "Id": "2c1a60f3d7394223a34c9c4d50558258"
    },
    {
      "Start": "ce72f689eb9a40a58fdc4bdd81399d1d",
      "End": "0cd2eb456f3140f69ef8944ef0916626",
      "Id": "7b2afd511094441ba97b5671db945d98"
    },
    {
      "Start": "118c63e7c7bf4694b931baa92688d63c",
      "End": "8130a4d8da194db28dd198519ae9a4eb",
      "Id": "213bef0b387047b78465d32b2bb279cf"
    },
    {
      "Start": "7aa24e9e29414ebd9702f5f503f0d6b5",
      "End": "e9a4c41e19774651b911f14bc8bd9d1a",
      "Id": "d510030d115a41fd97c05ac86d7d20a3"
    },
    {
      "Start": "12433df6fa764b688e3f551ae1f1a52c",
      "End": "136fe039706441b790989cc0671740f5",
      "Id": "e906a4e16e4d4a259afa8f1d5b9bf811"
    },
    {
      "Start": "d4629fb91e4b4272955cc98725e12fd7",
      "End": "104a95c42715494f9517fb2c6e40c919",
      "Id": "4695fd5b59c44efdbee820a3846e24ba"
    },
    {
      "Start": "69721e97dffe4d22bc17748321c65855",
      "End": "4d730d718e4a479f913ba592a9d0e50a",
      "Id": "d0c5a3311ddd46459abbb4b0f2e79d0a"
    },
    {
      "Start": "9679b23118af4f88a84827d79e2c46be",
      "End": "a2e93a829ea349bd86da11a47250c27b",
      "Id": "4c853bdb0ebc4de5a97270e843059649"
    },
    {
      "Start": "690fc57abec443a1ac34e7ab83128097",
      "End": "a8faee87dbac499d9adc09bfe588f9d0",
      "Id": "b62729bf7de848d29873abdc7b69c1e1"
    },
    {
      "Start": "0127cc3ba60b4597b2446c5a85c39bf1",
      "End": "b1460cadc40344cab574feb3861e5820",
      "Id": "2fa9f75e38fa48b49654fee782cd5ced"
    },
    {
      "Start": "0c874552fb6f4f81851c3f60a939d98b",
      "End": "7550341f07054f2a97e90098854f3432",
      "Id": "551f2fb8b8754ab697aef9fd3388de14"
    },
    {
      "Start": "cec4e462ec5147fb858383bf1f97a7de",
      "End": "41d28292a07e4d32bf8345608e964179",
      "Id": "4101399c4e5b4161bd10d44969a2e7e4"
    },
    {
      "Start": "5842f689c4e8422dba0efdbad2556478",
      "End": "f2305506434e47ae972bddd9bd9a4960",
      "Id": "96ab76f379a2461ba6bc85973c1bacce"
    },
    {
      "Start": "1041a38918024221b3054473a8c521c4",
      "End": "680249a197e34fd485acb40ae6bf1f8c",
      "Id": "64178ca4671b4dac8a2e3abf13dda5c7"
    },
    {
      "Start": "e8b2d4fe8fb246139705eb4bc9c83eff",
      "End": "935cc72043f54d8cb6aa0d944edc2c32",
      "Id": "a7c123c1e0294599b4c86f29f42dad01"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "MeshToolkit",
      "Version": "3.0.0",
      "ReferenceType": "Package",
      "Nodes": [
        "0426ec7bd99d4ed3b961468e48e461c8",
        "6108c0576bcb452fbb121645fc9db4e6",
        "07dcd20fb2b048dabf2af509e50bf4b1",
        "5d6082e1fb484054b80b2c895c17d93b"
      ]
    }
  ],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.8.0.2471",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": 15.746612548828125,
      "EyeY": 8.6273508071899414,
      "EyeZ": -20.749338150024414,
      "LookX": -10.1411771774292,
      "LookY": -7.6493082046508789,
      "LookZ": 8.834111213684082,
      "UpX": -0.22360767424106598,
      "UpY": 0.95501667261123657,
      "UpZ": 0.19478888809680939
    },
    "NodeViews": [
      {
        "ShowGeometry": false,
        "Name": "Cylinder Generator",
        "Id": "22628e4e6bfe4646980e562ef491c5a1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -352.527373360006,
        "Y": 1504.3556019649857
      },
      {
        "ShowGeometry": true,
        "Name": "Watch 3D",
        "Id": "a329b7f77ea24405bc0b32426dd8799d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 182.04646489040579,
        "Y": 308.05294584627433
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "8e7a3ce24b2f4f3fa82a6c41cc745eec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": -360.95450673248706,
        "Y": 307.20845989528482
      },
      {
        "ShowGeometry": false,
        "Name": "NurbsCurve.ByPoints",
        "Id": "7a1e3962650e4310b47e30e253e8696e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 158.0509422263176,
        "Y": 693.46427808386738
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "fc6594b85a484cca918c984686e99374",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -367.53759462744529,
        "Y": 683.02563473297664
      },
      {
        "ShowGeometry": false,
        "Name": "Circle.ByCenterPointRadiusNormal",
        "Id": "1f38c190550a446fa732f9216f9a4318",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 158.19032849475104,
        "Y": 843.88715242247531
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.YAxis",
        "Id": "564500ce75a94e5881cdec85505ff57b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -156.87551901510005,
        "Y": 855.99510319430442
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "bfca5700fc564da88c3938e3ac8f748d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 471.89679758668467,
        "Y": 695.13062666009864
      },
      {
        "ShowGeometry": false,
        "Name": "NurbsCurve.ByPoints",
        "Id": "fe00891fe5c04a22ad408c4e5695dd3b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 387.67986580334514,
        "Y": 1080.524283190829
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "4eee45d2570246689c7cae0d807acdb4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -364.75195413875554,
        "Y": 1078.7834865097464
      },
      {
        "ShowGeometry": false,
        "Name": "Circle.ByCenterPointRadiusNormal",
        "Id": "8ed443bc970045e48bc8fad3f0c603ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 388.34642640303605,
        "Y": 1242.5184534457153
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "d81673fb7d4f4d16834e8422b2b83f79",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 671.9833778238617,
        "Y": 1080.7597535995628
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.ZAxis",
        "Id": "469c3cd499b44f4c90eec11e000f14f0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 237.52936584991278,
        "Y": 1244.4735518665027
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "861b44d4ba0b4e0c87fba3668acb52d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -347.94385399620228,
        "Y": 1806.0691349231683
      },
      {
        "ShowGeometry": false,
        "Name": "Circle.ByCenterPointRadiusNormal",
        "Id": "29f9e8de0a80473c93ef3e708d1d355d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 219.62777973487687,
        "Y": 1931.8734094735721
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "34a61a841b9f4186bcfcd286ed3c6478",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 552.77535350299445,
        "Y": 1806.7541953767977
      },
      {
        "ShowGeometry": false,
        "Name": "NurbsCurve.ByPoints",
        "Id": "60f5fad9c5c440dcaf0f96f671d31090",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 215.51485548989763,
        "Y": 1805.7340655252672
      },
      {
        "ShowGeometry": false,
        "Name": "Vector.ZAxis",
        "Id": "15a2443546dd46e08fe341e9e1a35dc4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -9.4035980305636713,
        "Y": 1981.1553029986899
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "7fb70463483241b388105c3f214bcd06",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -340.94747705019859,
        "Y": 2140.2930703269058
      },
      {
        "ShowGeometry": false,
        "Name": "NurbsCurve.ByPoints",
        "Id": "c38542f622bf4056b2e04ffd2eb811a1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 218.57861678104814,
        "Y": 2142.0748975326151
      },
      {
        "ShowGeometry": false,
        "Name": "Circle.ByCenterPointRadiusNormal",
        "Id": "408bac64c9bb4b59b9c650a170a1f8a7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 222.28997095620139,
        "Y": 2264.0808407911545
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "165565d10e3a4ab4b569edc954658a59",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 555.73872227668858,
        "Y": 2142.9946348666817
      },
      {
        "ShowGeometry": false,
        "Name": "Vector.XAxis",
        "Id": "5c5fcf2b45cb4577b3f2c2b1c4ba37fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 23.156780356715672,
        "Y": 2315.2064717490448
      },
      {
        "ShowGeometry": false,
        "Name": "Solid.Union",
        "Id": "456bd47d516240a4bed332934c23188d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 992.10693748933386,
        "Y": 1984.3547638230127
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "672deb8103be49609d6512e68ff2708b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -336.32482127994376,
        "Y": 2477.3038309147823
      },
      {
        "ShowGeometry": false,
        "Name": "NurbsCurve.ByPoints",
        "Id": "28313af29d074295a47e99ab5be9c20f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 223.20127255130183,
        "Y": 2479.0856581204871
      },
      {
        "ShowGeometry": false,
        "Name": "Circle.ByCenterPointRadiusNormal",
        "Id": "f59e31fd7d57412a8503ece0ceb3cd86",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 226.91262672645462,
        "Y": 2601.0916013790275
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "7012df8b36404555a27ecb450662e146",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 560.36137804694317,
        "Y": 2480.9154609420475
      },
      {
        "ShowGeometry": false,
        "Name": "Vector.YAxis",
        "Id": "7366274bffc747d98adcd2e342e1066e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 32.836767881752394,
        "Y": 2652.00350794339
      },
      {
        "ShowGeometry": false,
        "Name": "Solid.Union",
        "Id": "5ab8cb039f0e45ccbb6036981142fdf3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1227.6879036888583,
        "Y": 2146.2550744797882
      },
      {
        "ShowGeometry": false,
        "Name": "Sphere.ByCenterPointRadius",
        "Id": "a5f89eb0ebbc47038d77cdc55f650a5d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 113.05936747239843,
        "Y": 2829.6070150371625
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "e11e75d88cae4a98828ec5521ef894ef",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -339.08754071634871,
        "Y": 2828.4922138692637
      },
      {
        "ShowGeometry": false,
        "Name": "Cuboid.ByCorners",
        "Id": "a0d373a3ada34d798ee1ab4011dcb58a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 109.61852186412739,
        "Y": 2989.4048822458944
      },
      {
        "ShowGeometry": true,
        "Name": "Watch 3D",
        "Id": "96fac09967074bdb92c593f87c7d4bd4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1613.5325703631663,
        "Y": 2861.7014917758943
      },
      {
        "ShowGeometry": false,
        "Name": "Solid.Difference",
        "Id": "a6dfe7a96e2643d2a85e8ec7e65340fd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1235.2512664513508,
        "Y": 2796.8031546641037
      },
      {
        "ShowGeometry": true,
        "Name": "Watch 3D",
        "Id": "eccf618a469b4ffa889fc4737bf3748b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2083.0146642573241,
        "Y": 2994.5681981080706
      },
      {
        "ShowGeometry": false,
        "Name": "Geometry.Intersect",
        "Id": "ce0b0c515fd54019825ecf8fbb8aec46",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 467.12032563159096,
        "Y": 3043.6880677649119
      },
      {
        "ShowGeometry": true,
        "Name": "Watch 3D",
        "Id": "65c006477cca403cab8861137725e143",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1523.2515179794461,
        "Y": 1979.9417978282563
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "3c006bdd512a4e8594166e909a8dec61",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1277.4583434051751,
        "Y": 411.35616840698526
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "adc8be7cd22041d7999a2ae96ae42e7f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -352.68588822350171,
        "Y": 3269.0667911697828
      },
      {
        "ShowGeometry": false,
        "Name": "NurbsCurve.ByControlPoints",
        "Id": "d4e593c475ba460aa1508c42f10aae96",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 296.4844374979624,
        "Y": 3322.2119650717855
      },
      {
        "ShowGeometry": false,
        "Name": "Circle.ByCenterPointRadiusNormal",
        "Id": "c35087fb4e584c71ac1ba52e3f667dda",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 303.95827865543356,
        "Y": 3552.032580664024
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.YAxis",
        "Id": "1441850a200549289798a124bdb7a44e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -77.59963795118415,
        "Y": 3464.671667783271
      },
      {
        "ShowGeometry": true,
        "Name": "Radius",
        "Id": "19916e7686f14eabb567d46bdd36f92d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 56.079268657715488,
        "Y": 3663.9418302800536
      },
      {
        "ShowGeometry": false,
        "Name": "Solid by Sweep",
        "Id": "3558019e86e6442e8e6e9ad26136e468",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 612.612915686598,
        "Y": 3441.8102905694218
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.XAxis",
        "Id": "300c8adc3b004809999bf8260a8da1ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 62.55855785444453,
        "Y": 3545.05133353471
      },
      {
        "ShowGeometry": true,
        "Name": "Solid.Union",
        "Id": "ab4f60852b9c449a8961c20d6afc3396",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1547.7255972051969,
        "Y": 3254.1859684407859
      },
      {
        "ShowGeometry": true,
        "Name": "Mesh Objects",
        "Id": "94f79f31b987404fbc5f67689cc996e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1277.6958734712753,
        "Y": 4424.8539495195319
      },
      {
        "ShowGeometry": true,
        "Name": "Mesh2WKTExporter",
        "Id": "1896c6058bd34f9296f4b4a287756c4d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1446.1966534716589,
        "Y": 4439.1155111044691
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b0a217a025f74f13808f7a0cc344b1a1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1691.9341124521616,
        "Y": 4445.2326539336254
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "d7270de632a54357a907a75d0f7bce84",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 625.00655865202725,
        "Y": 4394.6467538040151
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "ea77bc741ef5496fb6d3411628d9462f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 851.34412874282043,
        "Y": 4312.64038782909
      },
      {
        "ShowGeometry": true,
        "Name": "Mesh.ByGeometry",
        "Id": "0426ec7bd99d4ed3b961468e48e461c8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2028.2406518577995,
        "Y": 2287.8347354949665
      },
      {
        "ShowGeometry": true,
        "Name": "Mesh.Explode",
        "Id": "6108c0576bcb452fbb121645fc9db4e6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2384.3962628975296,
        "Y": 2303.1506383938768
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "b19f331b287e452c82062f00cc797a91",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2664.6854028969869,
        "Y": 2314.7147593612976
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "b81ba6417885454fbd54dee36e049c77",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2172.7350628208587,
        "Y": 2520.2717638013587
      },
      {
        "ShowGeometry": true,
        "Name": "mesh2WKT",
        "Id": "4fad054dd1c645fa98b6b1d517d734e0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2964.6331021524184,
        "Y": 2318.8641736037043
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "259aee5cfe3b45d38e4f2783ce2f70a6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3118.515242878043,
        "Y": 2534.6450897978734
      },
      {
        "ShowGeometry": true,
        "Name": "RDF_Wrapper",
        "Id": "70df646dab564b76bd894c8ee6c6e7ce",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3192.2945608750119,
        "Y": 2321.9837254823988
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "c5e640a37a824136a9a3f07f03842310",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3367.3834390178481,
        "Y": 2531.5684070747575
      },
      {
        "ShowGeometry": true,
        "Name": "RDF_to_JSON",
        "Id": "c491f0eea7c8489ebd7653248ff16c8a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3432.3336780653522,
        "Y": 2319.8943991897172
      },
      {
        "ShowGeometry": true,
        "Name": "JSON Export",
        "Id": "4c6eee1edd89412fac5d402cc52ba6a6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3638.0554304099987,
        "Y": 2311.2775168803259
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "44add20207a74d7ea2438bf42051d096",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3584.2386908991684,
        "Y": 2536.734627703011
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "76f043f238eb42debdfb61b72db4ab27",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2841.5748483130019,
        "Y": 2534.5581491750117
      },
      {
        "ShowGeometry": true,
        "Name": "Mesh.ByGeometry",
        "Id": "07dcd20fb2b048dabf2af509e50bf4b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1117.1587524375643,
        "Y": 3583.3385765344792
      },
      {
        "ShowGeometry": true,
        "Name": "Mesh.Explode",
        "Id": "5d6082e1fb484054b80b2c895c17d93b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1473.3143634772941,
        "Y": 3598.6544794333895
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "e476158f80ee47d9bf5d88bccf93d0b0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1753.6035034767447,
        "Y": 3610.2186004008095
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "4b98d66c720845a690b1fadab323fa4d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1734.2846843128746,
        "Y": 3800.1047984445795
      },
      {
        "ShowGeometry": true,
        "Name": "mesh2WKT",
        "Id": "4345991546a7419eb587d1ba5730bd8a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2054.1780349880346,
        "Y": 3614.9948468990692
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "8cc59ed11d884fd4ac6d30bc3f745efa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2207.4333434578048,
        "Y": 3830.1489308373893
      },
      {
        "ShowGeometry": true,
        "Name": "RDF_Wrapper",
        "Id": "0baa6a0f97ae47c38a4e2d7aa7d9283c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2281.9546836155005,
        "Y": 3617.4875665219092
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "e2371dae1dcb4644a642e876a12a1855",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2456.3015395976045,
        "Y": 3827.0722481142693
      },
      {
        "ShowGeometry": true,
        "Name": "RDF_to_JSON",
        "Id": "c7540fe3dd7543638e8f28914063e20b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2519.7677343236646,
        "Y": 3615.3982402292295
      },
      {
        "ShowGeometry": true,
        "Name": "JSON Export",
        "Id": "e50bfb0e4a79498ba3eb32c88cd2404e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2726.9735309897642,
        "Y": 3606.7813579198391
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "2d49fe4ee27e434fb6d85fd1e7acc32c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2673.1567914789348,
        "Y": 3832.2384687425292
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "85f4071220ad45b89cfab45e8095aa09",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1878.4658716570648,
        "Y": 3825.0473321677091
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "62ccd59d994b46339086ad7424f90c3f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2524.9055680035622,
        "Y": 2502.4326834599224
      }
    ],
    "Annotations": [
      {
        "Id": "4fcd2dc3bad94d1384b9cd91019583f0",
        "Title": "Cylinder",
        "Nodes": [
          "22628e4e6bfe4646980e562ef491c5a1"
        ],
        "Left": -362.527373360006,
        "Top": 1465.3556019649857,
        "Width": 197.0,
        "Height": 143.0,
        "FontSize": 24.0,
        "InitialTop": 1504.3556019649857,
        "InitialHeight": 145.0,
        "TextblockHeight": 29.0,
        "Background": "#FF90EE90"
      },
      {
        "Id": "940d8120b3324ebea6bcf719b9127e42",
        "Title": "Donut",
        "Nodes": [
          "fe00891fe5c04a22ad408c4e5695dd3b",
          "4eee45d2570246689c7cae0d807acdb4",
          "8ed443bc970045e48bc8fad3f0c603ec",
          "d81673fb7d4f4d16834e8422b2b83f79",
          "469c3cd499b44f4c90eec11e000f14f0",
          "bfca5700fc564da88c3938e3ac8f748d",
          "1f38c190550a446fa732f9216f9a4318",
          "7a1e3962650e4310b47e30e253e8696e",
          "fc6594b85a484cca918c984686e99374",
          "564500ce75a94e5881cdec85505ff57b"
        ],
        "Left": -377.53759462744529,
        "Top": 644.02563473297664,
        "Width": 1429.020972451307,
        "Height": 743.49281871273865,
        "FontSize": 24.0,
        "InitialTop": 683.02563473297664,
        "InitialHeight": 706.44791713352606,
        "TextblockHeight": 29.0,
        "Background": "#FF90EE90"
      },
      {
        "Id": "11072a7a515b4ad8949e8ebe13a9f329",
        "Title": "Constructive Solid Geometry (Union, Intersection, Difference)",
        "Nodes": [
          "861b44d4ba0b4e0c87fba3668acb52d4",
          "29f9e8de0a80473c93ef3e708d1d355d",
          "34a61a841b9f4186bcfcd286ed3c6478",
          "60f5fad9c5c440dcaf0f96f671d31090",
          "15a2443546dd46e08fe341e9e1a35dc4",
          "7fb70463483241b388105c3f214bcd06",
          "c38542f622bf4056b2e04ffd2eb811a1",
          "408bac64c9bb4b59b9c650a170a1f8a7",
          "165565d10e3a4ab4b569edc954658a59",
          "5c5fcf2b45cb4577b3f2c2b1c4ba37fe",
          "456bd47d516240a4bed332934c23188d",
          "672deb8103be49609d6512e68ff2708b",
          "28313af29d074295a47e99ab5be9c20f",
          "f59e31fd7d57412a8503ece0ceb3cd86",
          "7012df8b36404555a27ecb450662e146",
          "7366274bffc747d98adcd2e342e1066e",
          "5ab8cb039f0e45ccbb6036981142fdf3",
          "a5f89eb0ebbc47038d77cdc55f650a5d",
          "e11e75d88cae4a98828ec5521ef894ef",
          "a0d373a3ada34d798ee1ab4011dcb58a",
          "96fac09967074bdb92c593f87c7d4bd4",
          "a6dfe7a96e2643d2a85e8ec7e65340fd",
          "ce0b0c515fd54019825ecf8fbb8aec46",
          "65c006477cca403cab8861137725e143"
        ],
        "Left": -357.94385399620228,
        "Top": 1766.7340655252672,
        "Width": 2191.4764243593686,
        "Height": 1395.9540022396448,
        "FontSize": 24.0,
        "InitialTop": 1805.7340655252672,
        "InitialHeight": 1382.9540022396448,
        "TextblockHeight": 29.0,
        "Background": "#FF90EE90"
      },
      {
        "Id": "b22845b202f74493a57c1f171c2342ef",
        "Title": "Tube",
        "Nodes": [
          "adc8be7cd22041d7999a2ae96ae42e7f",
          "d4e593c475ba460aa1508c42f10aae96",
          "c35087fb4e584c71ac1ba52e3f667dda",
          "1441850a200549289798a124bdb7a44e",
          "19916e7686f14eabb567d46bdd36f92d",
          "3558019e86e6442e8e6e9ad26136e468",
          "300c8adc3b004809999bf8260a8da1ff"
        ],
        "Left": -362.68588822350171,
        "Top": 3230.0667911697828,
        "Width": 1354.7988039100997,
        "Height": 526.87503911027079,
        "FontSize": 24.0,
        "InitialTop": 3269.0667911697828,
        "InitialHeight": 539.87503911027079,
        "TextblockHeight": 29.0,
        "Background": "#FF90EE90"
      },
      {
        "Id": "8d3ac9b6217d49e199ee2b5d6435a1db",
        "Title": "Background",
        "Nodes": [
          "94f79f31b987404fbc5f67689cc996e8",
          "1896c6058bd34f9296f4b4a287756c4d",
          "b0a217a025f74f13808f7a0cc344b1a1",
          "d7270de632a54357a907a75d0f7bce84",
          "ea77bc741ef5496fb6d3411628d9462f"
        ],
        "Left": 615.00655865202725,
        "Top": 4273.64038782909,
        "Width": 1196.4275538001343,
        "Height": 333.21356169044157,
        "FontSize": 24.0,
        "InitialTop": 4312.64038782909,
        "InitialHeight": 277.59226610453516,
        "TextblockHeight": 29.0,
        "Background": "#FFD3D3D3"
      },
      {
        "Id": "2f1ae262eb10447d9dc488fdeb6e3f70",
        "Title": "WKT-to-RDF-to-JSON",
        "Nodes": [
          "0426ec7bd99d4ed3b961468e48e461c8",
          "6108c0576bcb452fbb121645fc9db4e6",
          "b19f331b287e452c82062f00cc797a91",
          "b81ba6417885454fbd54dee36e049c77",
          "4fad054dd1c645fa98b6b1d517d734e0",
          "259aee5cfe3b45d38e4f2783ce2f70a6",
          "70df646dab564b76bd894c8ee6c6e7ce",
          "c5e640a37a824136a9a3f07f03842310",
          "c491f0eea7c8489ebd7653248ff16c8a",
          "4c6eee1edd89412fac5d402cc52ba6a6",
          "44add20207a74d7ea2438bf42051d096",
          "76f043f238eb42debdfb61b72db4ab27",
          "62ccd59d994b46339086ad7424f90c3f"
        ],
        "Left": 2018.2406518577995,
        "Top": 2248.8347354949665,
        "Width": 1762.8147785521992,
        "Height": 381.89989220804455,
        "FontSize": 24.0,
        "InitialTop": 2287.8347354949665,
        "InitialHeight": 393.89989220804455,
        "TextblockHeight": 29.0,
        "Background": "#FF90EE90"
      },
      {
        "Id": "d9284d23e14e40eb9d4d1677b29e9ef3",
        "Title": "WKT-to-RDF-to-JSON",
        "Nodes": [
          "07dcd20fb2b048dabf2af509e50bf4b1",
          "5d6082e1fb484054b80b2c895c17d93b",
          "e476158f80ee47d9bf5d88bccf93d0b0",
          "4b98d66c720845a690b1fadab323fa4d",
          "4345991546a7419eb587d1ba5730bd8a",
          "8cc59ed11d884fd4ac6d30bc3f745efa",
          "0baa6a0f97ae47c38a4e2d7aa7d9283c",
          "e2371dae1dcb4644a642e876a12a1855",
          "c7540fe3dd7543638e8f28914063e20b",
          "e50bfb0e4a79498ba3eb32c88cd2404e",
          "2d49fe4ee27e434fb6d85fd1e7acc32c",
          "85f4071220ad45b89cfab45e8095aa09"
        ],
        "Left": 1107.1587524375643,
        "Top": 3544.3385765344792,
        "Width": 1762.8147785521999,
        "Height": 381.89989220805,
        "FontSize": 24.0,
        "InitialTop": 3583.3385765344792,
        "InitialHeight": 393.89989220805,
        "TextblockHeight": 29.0,
        "Background": "#FF90EE90"
      }
    ],
    "X": -251.11993455628897,
    "Y": -804.79330204769553,
    "Zoom": 0.48651316594975291
  }
}